<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Google Play 免税设置</title>
      <link href="/posts/43832024/"/>
      <url>/posts/43832024/</url>
      
        <content type="html"><![CDATA[<p>按照网上的说法，美国地区有5个免税州，俄勒冈Oregon、特拉华州Delaware、阿拉斯加Alaska、蒙大拿Montana、新罕布尔什州New Hampshellore。其中阿拉斯加州部分城市是不免税的。</p><p>我用信用卡绑 Google Play 的时候，填的账单地址是阿拉斯加州的地址，但是在购买 APP 的时候还是收了大概 0.4% 的销售税，我又查了一下<a href="https://support.google.com/googleplay/answer/2850368">Google Play 征收销售税的地区</a>，于是又重新修改了一下信用卡的账单地址，发现还是会收取税费😡。折腾了好久，解决方法是在 <a href="https://payments.google.com/payments/home#paymentMethods">Google 付款中心</a>的三个地方设置<a href="https://www.fakepersongenerator.com/Index/generate">免税地址</a>，并且这<strong>三个地址要保持一致</strong>：</p><ul><li><a href="https://payments.google.com/gp/w/home/paymentmethods">付款方式</a>：修改信用卡账单地址</li><li><a href="https://payments.google.com/gp/w/home/addressbook">地址</a>：只保留一个地址</li><li><a href="https://payments.google.com/gp/w/home/settings">设置</a>：付款资料-&gt;地址</li></ul><p>设置完成之后，Googe Play 清一下缓存重新进入，付款的时候就免税了。</p>]]></content>
      
      
      <categories>
          
          <category> 知道 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Google Play </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>外观模式</title>
      <link href="/posts/3a68f720/"/>
      <url>/posts/3a68f720/</url>
      
        <content type="html"><![CDATA[<p><img src="/../img/design-pattern-facade.png" alt="adapter"></p><p>外观设计模式为子系统中的一组接口提供统一接口。此模式定义了一个更高级别的接口，使子系统更易于使用。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>适配器模式</title>
      <link href="/posts/4c74d875/"/>
      <url>/posts/4c74d875/</url>
      
        <content type="html"><![CDATA[<p><img src="/../img/design-pattern-adapter.png" alt="adapter"></p><p>将一个类的接口转换成客户希望的另外一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ASP.NET Core 学习（一）</title>
      <link href="/posts/f44d4d94/"/>
      <url>/posts/f44d4d94/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>用微软的 outlook 发送邮件时报错</title>
      <link href="/posts/e39b176c/"/>
      <url>/posts/e39b176c/</url>
      
        <content type="html"><![CDATA[<p>在使用 .net 自带的 SmtpClient 发送邮件的时候报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Unhandled exception. System.Net.Mail.SmtpException: The SMTP server requires a secure connection or the client was not authenticated. The server response was: 5.7.57 Client not authenticated to send mail. Error: 535 5.7.139 Authentication unsuccessful, the user credentials were incorrect.</span><br></pre></td></tr></table></figure><p>如果确认账号密码填写正确，并且 SMTP 服务器地址也填写正确，并且 outlook 设置里的 “允许设备和应用使用POP” 选项已经打开。那有可能是微软账号开启了多重身份验证 (MFA)，这时候就需要使用应用密码而不是普通密码来进行 SMTP 身份验证。</p><p>去微软账户的管理后台创建一个应用密码：<a href="https://account.live.com/proofs/Manage/additional?mkt=zh-cn">https://account.live.com/proofs/Manage/additional?mkt=zh-cn</a></p>]]></content>
      
      
      <categories>
          
          <category> 知道 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Go 语言中的浅拷贝和深拷贝</title>
      <link href="/posts/9c9c65a4/"/>
      <url>/posts/9c9c65a4/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是浅拷贝？"><a href="#什么是浅拷贝？" class="headerlink" title="什么是浅拷贝？"></a>什么是浅拷贝？</h3><p>浅拷贝的意思是，只复制结构体的顶层字段，而不复制它们指向的底层数据。如果结构体中有指针或引用类型的字段，例如切片、映射或通道，那么复制后的变量会共享这些字段的底层数据，而不是创建一个新的副本。</p><p>当使用赋值运算符将一个结构体变量复制给另一个结构体变量时，会发生浅拷贝。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestShadowCopy</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">type</span> Car <span class="keyword">struct</span> &#123;</span><br><span class="line">Brand  <span class="type">string</span></span><br><span class="line">Model  <span class="type">string</span></span><br><span class="line">Owners []<span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">car1 := Car&#123;Brand: <span class="string">&quot;Tesla&quot;</span>, Model: <span class="string">&quot;Model X&quot;</span>, Owners: []<span class="type">string</span>&#123;<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Bob&quot;</span>&#125;&#125;</span><br><span class="line">car2 := car1 <span class="comment">// Shadow copy</span></span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;car1.Owners 的地址: %p, car2.Owners 的地址: %p\n&quot;</span>, &amp;car1.Owners, &amp;car2.Owners)</span><br><span class="line">fmt.Printf(<span class="string">&quot;car1.Owners 指向的切片指针: %p, car2.Owners 指向的切片指针: %p\n&quot;</span>, car1.Owners, car2.Owners)</span><br><span class="line"></span><br><span class="line"><span class="comment">// change index 0 of &#x27;Owners&#x27; from copy</span></span><br><span class="line">car2.Owners[<span class="number">0</span>] = <span class="string">&quot;John&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// the Owners from car1 was changed too</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;car1 :%v,\nCar2: %v\n&quot;</span>, car1, car2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">=== RUN   TestShadowCopy</span><br><span class="line">car1.Owners 的地址: 0xc0000a0ce0, car2.Owners 的地址: 0xc0000a0d20</span><br><span class="line">car1.Owners 指向的切片指针: 0xc000098700, car2.Owners 指向的切片指针: 0xc000098700</span><br><span class="line">car1: &#123;Tesla Model X [John Bob]&#125;,</span><br><span class="line">car2: &#123;Tesla Model X [John Bob]&#125;</span><br></pre></td></tr></table></figure><p>可以看到，car1 和 car2 是两个不同的结构体变量，所以 car1.Owners 和 car2.Owners 的地址不同，但由于 car1.Owners 是切片类型，赋值的时候发生了浅拷贝，所以 car1.Owners 和 car2.Owners 指向了同一个切片，对 car1.Owners 或 car2.Owners 的修改实际上修改的是同一个切片。</p><h3 id="什么是深拷贝？"><a href="#什么是深拷贝？" class="headerlink" title="什么是深拷贝？"></a>什么是深拷贝？</h3><p>深拷贝的意思是创建变量的新实例并复制所有内部元素，无论它们在数据结构中的“深度”如何。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestDeepCopy</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">type</span> Car <span class="keyword">struct</span> &#123;</span><br><span class="line">Brand  <span class="type">string</span></span><br><span class="line">Model  <span class="type">string</span></span><br><span class="line">Owners []<span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// deepCopyCar performs a deep copy from src to dest.</span></span><br><span class="line">deepCopyCar := <span class="function"><span class="keyword">func</span><span class="params">(src, dest *Car)</span></span> &#123;</span><br><span class="line">dest.Brand = src.Brand</span><br><span class="line">dest.Model = src.Model</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create a new slice with its own underlying array</span></span><br><span class="line">dest.Owners = <span class="built_in">make</span>([]<span class="type">string</span>, <span class="built_in">len</span>(src.Owners))</span><br><span class="line"></span><br><span class="line"><span class="comment">// Copy the content of the original slice to the new slice</span></span><br><span class="line"><span class="built_in">copy</span>(dest.Owners, src.Owners)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">car1 := Car&#123;Brand: <span class="string">&quot;Tesla&quot;</span>, Model: <span class="string">&quot;Model X&quot;</span>, Owners: []<span class="type">string</span>&#123;<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Bob&quot;</span>&#125;&#125;</span><br><span class="line"><span class="keyword">var</span> car2 Car</span><br><span class="line"></span><br><span class="line"><span class="comment">// Perform the manual deep copy</span></span><br><span class="line">deepCopyCar(&amp;car1, &amp;car2)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Modify the first index of the &quot;Owners&quot; slice in car2</span></span><br><span class="line">car2.Owners[<span class="number">0</span>] = <span class="string">&quot;John&quot;</span></span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;Car1: %v\nCar2: %v\n&quot;</span>, car1, car2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">=== RUN   TestDeepCopy</span><br><span class="line">car1: &#123;Tesla Model X [Alice Bob]&#125;</span><br><span class="line">car2: &#123;Tesla Model X [John Bob]&#125;</span><br></pre></td></tr></table></figure><p>可以看到，通过深拷贝的方式创建的 car2，对 car2 的修改并不会影响到 car1。</p><h3 id="何时用浅拷贝？何时用深拷贝？"><a href="#何时用浅拷贝？何时用深拷贝？" class="headerlink" title="何时用浅拷贝？何时用深拷贝？"></a>何时用浅拷贝？何时用深拷贝？</h3><p>当不需要对数据进行更改时，用浅拷贝，节省CPU时间和内存。</p><p>当你需要数据的完整且独立的副本时，用深拷贝。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github 网络问题</title>
      <link href="/posts/e8bf53bc/"/>
      <url>/posts/e8bf53bc/</url>
      
        <content type="html"><![CDATA[<p><strong>直接在 <code>~/.ssh/config</code> 中无脑配置：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">    HostName ssh.github.com</span><br><span class="line">    User git</span><br><span class="line">    Port 443</span><br><span class="line">    ProxyCommand &#x27;C:\Program Files\Git\mingw64\bin\connect.exe&#x27; -S 127.0.0.1:7890 %h %p # Windows</span><br><span class="line">    ProxyCommand nc -v -x 127.0.0.1:7890 %h %p # macOS</span><br></pre></td></tr></table></figure><p>over.</p>]]></content>
      
      
      <categories>
          
          <category> 知道 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Github </tag>
            
            <tag> proxy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>建造者模式</title>
      <link href="/posts/fe816c3c/"/>
      <url>/posts/fe816c3c/</url>
      
        <content type="html"><![CDATA[<p><img src="/../img/design-pattern-builder.png" alt="builder"></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Product</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="built_in">string</span>.Empty;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Description &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="built_in">string</span>.Empty;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Builder</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Builder <span class="title">BuildHeader</span>()</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Builder <span class="title">BuildBody</span>()</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Builder <span class="title">BuildFooter</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CatBuilder</span> : <span class="title">Builder</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> Builder <span class="title">BuildBody</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NotImplementedException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> Builder <span class="title">BuildFooter</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NotImplementedException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> Builder <span class="title">BuildHeader</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NotImplementedException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DogBuilder</span> : <span class="title">Builder</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> Builder <span class="title">BuildBody</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NotImplementedException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> Builder <span class="title">BuildFooter</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NotImplementedException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> Builder <span class="title">BuildHeader</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NotImplementedException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Director</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Construct</span>(<span class="params">Builder builder</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        builder</span><br><span class="line">            .BuildHeader()</span><br><span class="line">            .BuildBody()</span><br><span class="line">            .BuildFooter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>策略模式</title>
      <link href="/posts/72e3b671/"/>
      <url>/posts/72e3b671/</url>
      
        <content type="html"><![CDATA[<p><img src="/../img/design-pattern-strategy.png" alt="strategy"></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抽象工厂模式</title>
      <link href="/posts/9b7d6e62/"/>
      <url>/posts/9b7d6e62/</url>
      
        <content type="html"><![CDATA[<p>苹果公司生产手机和电脑，小米公司也生产手机和电脑，抽象工厂模式就是要抽象这里的公司和产品，外部调用抽象工厂客户端的时候只需指定一个工厂，无需指定具体的产品。</p><p>抽象工厂模式包含：抽象的工厂，具体的工厂，抽象的产品，具体的产品，提供给外部使用的客户端。</p><p><img src="/img/design-pattern-abstract-factory.png" alt="design-pattern-abstract-factory"></p><h3 id="抽象的工厂"><a href="#抽象的工厂" class="headerlink" title="抽象的工厂"></a>抽象的工厂</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AbstractFactory 抽象的公司生产抽象的产品</span></span><br><span class="line"><span class="keyword">type</span> AbstractFactory <span class="keyword">interface</span> &#123;</span><br><span class="line">CreatePhone() AbstractPhone</span><br><span class="line">CreateComputer() AbstractComputer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="具体的工厂"><a href="#具体的工厂" class="headerlink" title="具体的工厂"></a>具体的工厂</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _ AbstractFactory = (*AppleFactory)(<span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">var</span> _ AbstractFactory = (*MiFactory)(<span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> AppleFactory <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewAppleFactory</span><span class="params">()</span></span> AbstractFactory                   &#123; <span class="keyword">return</span> &amp;AppleFactory&#123;&#125; &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f *AppleFactory)</span></span> CreatePhone() AbstractPhone       &#123; <span class="keyword">return</span> &amp;IPhone&#123;&#125; &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f *AppleFactory)</span></span> CreateComputer() AbstractComputer &#123; <span class="keyword">return</span> &amp;MacBook&#123;&#125; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MiFactory <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewMiFactory</span><span class="params">()</span></span> AbstractFactory                   &#123; <span class="keyword">return</span> &amp;MiFactory&#123;&#125; &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f *MiFactory)</span></span> CreatePhone() AbstractPhone       &#123; <span class="keyword">return</span> &amp;MiPhone&#123;&#125; &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f *MiFactory)</span></span> CreateComputer() AbstractComputer &#123; <span class="keyword">return</span> &amp;MiBook&#123;&#125; &#125;</span><br></pre></td></tr></table></figure><h3 id="抽象的产品"><a href="#抽象的产品" class="headerlink" title="抽象的产品"></a>抽象的产品</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AbstractPhone 手机可以打电话、看B站</span></span><br><span class="line"><span class="keyword">type</span> AbstractPhone <span class="keyword">interface</span> &#123;</span><br><span class="line">Call()</span><br><span class="line">Bilibili()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AbstractComputer 电脑可以写代码、玩恋爱冒险游戏</span></span><br><span class="line"><span class="keyword">type</span> AbstractComputer <span class="keyword">interface</span> &#123;</span><br><span class="line">Code()</span><br><span class="line">PlayGalgame()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="具体的产品"><a href="#具体的产品" class="headerlink" title="具体的产品"></a>具体的产品</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _ AbstractPhone = (*IPhone)(<span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">var</span> _ AbstractPhone = (*MiPhone)(<span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> IPhone <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *IPhone)</span></span> Call()     &#123; log.Println(<span class="string">&quot;iphone call me&quot;</span>) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *IPhone)</span></span> Bilibili() &#123; log.Println(<span class="string">&quot;iphone watching bilibili&quot;</span>) &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MiPhone <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *MiPhone)</span></span> Call()     &#123; log.Println(<span class="string">&quot;mi phone call me&quot;</span>) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *MiPhone)</span></span> Bilibili() &#123; log.Println(<span class="string">&quot;mi phone watching bilibili&quot;</span>) &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _ AbstractComputer = (*MacBook)(<span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">var</span> _ AbstractComputer = (*MiBook)(<span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MiBook <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *MiBook)</span></span> Code()        &#123; log.Println(<span class="string">&quot;mibook wrote a bug&quot;</span>) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *MiBook)</span></span> PlayGalgame() &#123; log.Println(<span class="string">&quot;mibook playing galgame&quot;</span>) &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MacBook <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *MacBook)</span></span> Code()        &#123; log.Println(<span class="string">&quot;macbook wrote a bug&quot;</span>) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *MacBook)</span></span> PlayGalgame() &#123; log.Println(<span class="string">&quot;macbook can&#x27;t play galgame, shit!&quot;</span>) &#125;</span><br></pre></td></tr></table></figure><h3 id="提供给外部使用的客户端"><a href="#提供给外部使用的客户端" class="headerlink" title="提供给外部使用的客户端"></a>提供给外部使用的客户端</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> FactoryClient <span class="keyword">struct</span> &#123;</span><br><span class="line">Phone    AbstractPhone</span><br><span class="line">Computer AbstractComputer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewFactoryClient</span><span class="params">(factory AbstractFactory)</span></span> *FactoryClient &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;FactoryClient&#123;Phone: factory.CreatePhone(), Computer: factory.CreateComputer()&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="外部调用"><a href="#外部调用" class="headerlink" title="外部调用"></a>外部调用</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestNewFactoryClient</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">appleFactory := NewAppleFactory()</span><br><span class="line">factoryClient := NewFactoryClient(appleFactory)</span><br><span class="line">factoryClient.Phone.Call()</span><br><span class="line">factoryClient.Phone.Bilibili()</span><br><span class="line">factoryClient.Computer.Code()</span><br><span class="line">factoryClient.Computer.PlayGalgame()</span><br><span class="line">t.Log(<span class="string">&quot;---&quot;</span>)</span><br><span class="line">miFactory := NewMiFactory()</span><br><span class="line">factoryClient = NewFactoryClient(miFactory)</span><br><span class="line">factoryClient.Phone.Call()</span><br><span class="line">factoryClient.Phone.Bilibili()</span><br><span class="line">factoryClient.Computer.Code()</span><br><span class="line">factoryClient.Computer.PlayGalgame()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">iphone call me</span><br><span class="line">iphone watching bilibili</span><br><span class="line">macbook wrote a bug</span><br><span class="line">macbook can&#x27;t play galgame, shit!</span><br><span class="line">---</span><br><span class="line">mi phone call me</span><br><span class="line">mi phone watching bilibili</span><br><span class="line">mibook wrote a bug</span><br><span class="line">mibook playing galgame</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>.Net学习</title>
      <link href="/posts/38ea7f4b/"/>
      <url>/posts/38ea7f4b/</url>
      
        <content type="html"><![CDATA[<h2 id="构造函数和初始化"><a href="#构造函数和初始化" class="headerlink" title="构造函数和初始化"></a>构造函数和初始化</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 默认值初始化</span></span><br><span class="line"><span class="comment">// 通常，对于数字类型，该值为 0，对于所有引用类型，该值为 null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 字段初始化表达式设置初始值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Container</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Initialize capacity field to a default value of 10:</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> _capacity = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 构造函数参数初始化</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Container</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> _capacity;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Container</span>(<span class="params"><span class="built_in">int</span> capacity</span>)</span> =&gt; _capacity = capacity;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Container</span>(<span class="params"><span class="built_in">int</span> capacity</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> _capacity = capacity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 调用方使用对象初始值设定项来设置该属性的初始值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> required <span class="built_in">string</span> LastName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> required <span class="built_in">string</span> FirstName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(); <span class="comment">// Error! Required properties not set</span></span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person() &#123; FirstName = <span class="string">&quot;Grace&quot;</span>, LastName = <span class="string">&quot;Hopper&quot;</span> &#125;;</span><br></pre></td></tr></table></figure><h2 id="静态类和静态类成员"><a href="#静态类和静态类成员" class="headerlink" title="静态类和静态类成员"></a>静态类和静态类成员</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 静态类无法实例化。 由于不存在任何实例变量，因此可以使用类名本身访问静态类的成员。</span></span><br><span class="line">UtilityClass.MethodA();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 静态字段的两个常见用途是保留已实例化的对象数的计数，或是存储必须在所有实例间共享的值。</span></span><br><span class="line"><span class="comment">// 静态方法可以进行重载，但不能进行替代，因为它们属于类，而不属于类的任何实例。</span></span><br><span class="line"><span class="comment">// 如果类包含静态字段，则提供在类加载时初始化它们的静态构造函数。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Automobile</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> NumberOfWheels = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> SizeOfGasTank</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">15</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Drive</span>()</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">event</span> EventType? RunOutOfGas;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Other non-static fields and properties...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 常量使用 const 修饰符声明。 仅 C# 内置类型（不包括 System.Object）可声明为 const。</span></span><br><span class="line"><span class="comment">// 用户定义的类型（包括类、结构和数组）不能为 const。 </span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Calendar1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> <span class="built_in">int</span> Months = <span class="number">12</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Constants</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> <span class="built_in">double</span> Pi = <span class="number">3.14159</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> <span class="built_in">int</span> SpeedOfLight = <span class="number">300000</span>; <span class="comment">// km per sec.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">double</span> radius = <span class="number">5.3</span>;</span><br><span class="line">        <span class="built_in">double</span> area = Constants.Pi * (radius * radius);</span><br><span class="line">        <span class="built_in">int</span> secsFromSun = <span class="number">149476000</span> / Constants.SpeedOfLight; <span class="comment">// in km</span></span><br><span class="line">        Console.WriteLine(secsFromSun);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 readonly 修饰符创建在运行时一次性（例如在构造函数中）初始化的类、结构或数组，此后不能更改。</span></span><br></pre></td></tr></table></figure><h2 id="空值"><a href="#空值" class="headerlink" title="空值"></a>空值</h2><p>可为 null 值类型 T? 表示其基础值类型 T 的所有值及额外的 null 值。 例如，可以将以下三个值中的任意一个指定给 bool? 变量：true、false 或 null。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">double</span>? pi = <span class="number">3.14</span>;</span><br><span class="line"><span class="built_in">char</span>? letter = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> m2 = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">int</span>? m = m2;</span><br><span class="line"></span><br><span class="line"><span class="built_in">bool</span>? flag = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// An array of a nullable value type:</span></span><br><span class="line"><span class="built_in">int</span>?[] arr = <span class="keyword">new</span> <span class="built_in">int</span>?[<span class="number">10</span>];</span><br></pre></td></tr></table></figure><p>检查是否为空</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span>? b = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span> (b.HasValue)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;b is <span class="subst">&#123;b.Value&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;b does not have a value&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// b is 10</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span>? c = <span class="number">7</span>;</span><br><span class="line"><span class="keyword">if</span> (c != <span class="literal">null</span>)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;c is <span class="subst">&#123;c.Value&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;c does not have a value&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// c is 7</span></span><br></pre></td></tr></table></figure><p>可为空的值类型转换为基础类型</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span>? a = <span class="number">28</span>;</span><br><span class="line"><span class="built_in">int</span> b = a ?? <span class="number">-1</span>;</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;b is <span class="subst">&#123;b&#125;</span>&quot;</span>);  <span class="comment">// output: b is 28</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span>? c = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">int</span> d = c ?? <span class="number">-1</span>;</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;d is <span class="subst">&#123;d&#125;</span>&quot;</span>);  <span class="comment">// output: d is -1</span></span><br></pre></td></tr></table></figure><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><p><strong>abstract和virtual的区别</strong></p><p>abstract和virtual都是用来修饰方法的关键字，它们的区别主要有以下几点：</p><ul><li>abstract只能用在抽象类中，而virtual可以用在普通类中。</li><li>abstract修饰的方法没有实现体，必须由子类用override重写，而virtual修饰的方法有实现体，可以由子类用override重写，也可以不重写。</li><li>abstract修饰的方法是隐式虚的，不需要用virtual再声明，而virtual修饰的方法是显式虚的，需要用virtual声明。</li><li>abstract修饰的方法不能用new隐藏，而virtual修饰的方法可以用new隐藏。</li></ul><p>简单来说，abstract和virtual的用法和区别可以用下面的表格总结：</p><table><thead><tr><th align="center">修饰符</th><th align="center">所在类</th><th align="center">实现体</th><th align="center">重写</th><th align="center">隐式虚</th><th align="center">隐藏</th></tr></thead><tbody><tr><td align="center">abstract</td><td align="center">抽象类</td><td align="center">无</td><td align="center">必须</td><td align="center">是</td><td align="center">否</td></tr><tr><td align="center">virtual</td><td align="center">普通类</td><td align="center">有</td><td align="center">可选</td><td align="center">否</td><td align="center">是</td></tr></tbody></table><p><strong>abstract的用法</strong></p><ul><li>abstract 修饰符可用于类、方法、属性、索引和事件</li></ul><p>被 abstract 修饰的类：</p><ul><li>抽象类不能实例化。</li><li>无法使用 sealed 修饰符来修改抽象类，因为两个修饰符的含义相反。 sealed 修饰符阻止类被继承，而 abstract 修饰符要求类被继承。</li><li>派生自抽象类的非抽象类，必须包含全部已继承的抽象方法和访问器的实际实现。</li></ul><p>被 abstract 修饰的方法：</p><ul><li>抽象方法是隐式的虚拟方法。</li><li>只有抽象类中才允许抽象方法声明。</li><li>由于抽象方法声明不提供实际的实现，因此没有方法主体；方法声明仅以分号结尾，且签名后没有大括号 ({ })</li><li>在抽象方法不能使用 static 或 virtual 修饰符。</li></ul><p><strong>override的用法</strong></p><ul><li>override 方法提供从基类继承的方法的新实现。 通过 override 声明重写的方法称为重写基方法。 </li><li>不能重写非虚方法或静态方法。 重写基方法必须是 virtual、abstract 或 override。</li><li>override 声明不能更改 virtual 方法的可访问性。 override 方法和 virtual 方法必须具有相同级别访问修饰符。</li><li>不能使用 new、static 或 virtual 修饰符修改 override 方法。</li></ul><p><strong>sealed的用法</strong></p><ul><li>sealed修饰符用来阻止类被继承</li></ul>]]></content>
      
      
      <categories>
          
          <category> 备忘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 VSCode 中远程调试 Go 程序</title>
      <link href="/posts/73130bba/"/>
      <url>/posts/73130bba/</url>
      
        <content type="html"><![CDATA[<p><strong>调试远程服务器中的 Go 程序</strong></p><p>在服务端执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dlv debug ./cmd/app/main.go --headless --listen=:2345 --api-version=2 --accept-multiclient --continue</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go build -gcflags &quot;all=-N -l&quot; -o app ./cmd/app</span><br><span class="line">dlv exec ./app --headless --listen=:2345 --api-version=2 --accept-multiclient --continue</span><br></pre></td></tr></table></figure><p><strong>调试远程容器中的 Go 程序</strong></p><p>创建 Dockerfile 文件 <code>debug.Dockerfile</code> ：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Compile stage</span></span><br><span class="line"><span class="keyword">FROM</span> golang:<span class="number">1.19</span> AS build-<span class="keyword">env</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> go <span class="built_in">env</span> -w GOPROXY=https://goproxy.cn,direct</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Build Delve</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> go install github.com/go-delve/delve/cmd/dlv@latest</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /dockerdev</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . .</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> go build -gcflags=<span class="string">&quot;all=-N -l&quot;</span> -o app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Final stage</span></span><br><span class="line"><span class="keyword">FROM</span> debian:buster</span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">18000</span> <span class="number">2345</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=build-env /go/bin/dlv /</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=build-env /dockerdev/app .</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;/dlv&quot;</span>, <span class="string">&quot;--listen=:2345&quot;</span>, <span class="string">&quot;--headless=true&quot;</span>, <span class="string">&quot;--api-version=2&quot;</span>, <span class="string">&quot;--accept-multiclient&quot;</span>, <span class="string">&quot;exec&quot;</span>, <span class="string">&quot;/app&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>启动容器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker build -f debug.Dockerfile -t app:v1 .</span><br><span class="line">docker run --rm --name my_app -p 18000:18000 -p 2345:2345 --security-opt=&quot;apparmor=unconfined&quot; --cap-add=SYS_PTRACE app:v1</span><br></pre></td></tr></table></figure><p><strong>最后</strong></p><p>在 <code>.vscode/launch.json</code> 中配置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Connect to server&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;go&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;debugAdapter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;legacy&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;attach&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;mode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;remote&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">2345</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;host&quot;</span><span class="punctuation">:</span> <span class="string">&quot;192.168.1.233&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>更多：<a href="https://github.com/golang/vscode-go/blob/master/docs/debugging.md">https://github.com/golang/vscode-go/blob/master/docs/debugging.md</a></p>]]></content>
      
      
      <categories>
          
          <category> 知道 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> dlv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LaTeX 简单用用</title>
      <link href="/posts/4528fd42/"/>
      <url>/posts/4528fd42/</url>
      
        <content type="html"><![CDATA[<p>首先，创建一个最小的完整源文件，<code>sample.tex</code></p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>&#123;article&#125;</span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line">Small is beautiful.</span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure><p>如何编译这个源文件？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xelatex sample.tex <span class="comment"># 或</span></span><br><span class="line">xelatex -output-directory=mydir -job-name=mysample sample.tex</span><br></pre></td></tr></table></figure><p><code>-output-directory</code> 指定输出的目录，<code>-job-name</code> 指定输出的文件名字。</p><p><strong>命令有两种</strong></p><p>反斜杠 \ 开始加上字母：<code>\documentclass[a4paper,11pt]&#123;article&#125;</code>，大括号里是参数，中括号里是可选参数，可选参数之间不能有空格。</p><p>反斜杠 \ 开始加上特殊字符：<code>\\</code>，意思是强制断行。</p><p><strong>特殊字符</strong></p><p>引号：两个左单引号是一个左引号 <code>‘‘</code> 两个右单引号是一个右引号 <code>’’</code></p><p>破折号和连字号：<code>-</code> 是连字号，<code>--</code> 是短破折号，<code>---</code> 是长破折号</p><p>波浪号： <code>\~</code></p><p>度：<code>$-30\,^&#123;\circ&#125;\mathrm&#123;C&#125;$</code></p><p>省略号：<code>\ldots</code></p><p>禁止连字：<code>\mbox&#123;&#125;</code>，例如 <code>shelf\mbox&#123;&#125;ful</code></p><p><strong>强调</strong></p><p>下划线：<code>\underline&#123;text&#125;</code>，在印刷的书中，用 <code>\emph&#123;text&#125;</code> 来强调文本。</p><p><strong>环境</strong></p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;environment&#125;</span><br><span class="line">text</span><br><span class="line"><span class="keyword">\end</span>&#123;environment&#125;</span><br></pre></td></tr></table></figure><p>environment 是环境的名称。</p><p><code>itemize</code> 环境用于简单的列表，<code>enumerate</code> 环境用于带序号的列表，<code>description</code> 环境用于带描述的列表。</p><p><code>flushleft</code> 和 <code>flushright</code> 环境分别产生靠左排列和靠右排列的段落。<code>center</code> 环境产生居中的文本。</p><p><code>quote</code> 环境用于重要断语和例子的引用。</p><p><code>quotation</code> 环境用于超过几段的较长引用。<code>verse</code> 环境用于诗歌。</p><p><code>verbatim</code> 之间的文本将直接打印，包括所有的断行和空白，就像在打字机上键入一样，不执行任何 LATEX 命令。相当于 <code>\verb+text+</code>，+ 仅是分隔符的一个例子。除了 * 或空格，可以使用任意一个字符。</p><p><strong>数学公式</strong></p><p>段落中的数学表达式应该置于 <code>\(</code> 和 <code>\)</code>， <code>$</code> 和 <code>$</code> 之间，或者 <code>\begin&#123;math&#125;</code> 和 <code>\end&#123;math&#125;</code> 之间。</p><p>对于较大的数学式子，应该置于 <code>\[</code> 和 <code>\]</code> 或者 <code>\begin&#123;displaymath&#125;</code> 和 <code>\end&#123;displaymath&#125;</code> 之间。如果你希望给公式添加编号，可以使用 <code>\begin&#123;equation&#125;</code> 和 <code>\end&#123;equation&#125;</code>，并利用 <code>\label</code> 和 <code>\ref</code> 对公式加以引用。。</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;equation&#125; <span class="keyword">\label</span>&#123;eq:eps&#125;</span><br><span class="line"><span class="keyword">\epsilon</span> &gt; 0</span><br><span class="line"><span class="keyword">\end</span>&#123;equation&#125;</span><br><span class="line">From (<span class="keyword">\ref</span>&#123;eq:eps&#125;), we gather</span><br><span class="line"><span class="keyword">\ldots</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 知道 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LaTeX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 Go 中执行事务</title>
      <link href="/posts/3039fbbf/"/>
      <url>/posts/3039fbbf/</url>
      
        <content type="html"><![CDATA[<p>首先从标准库中找出 <code>sql.DB</code> 和 <code>sql.Tx</code> 公共的方法，作为操作数据库的接口。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> database</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> db *sql.DB</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetDB</span><span class="params">()</span></span> *sql.DB &#123;</span><br><span class="line"><span class="keyword">return</span> db</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> DB <span class="keyword">interface</span> &#123;</span><br><span class="line">PrepareContext(ctx context.Context, query <span class="type">string</span>) (*sql.Stmt, <span class="type">error</span>)</span><br><span class="line">Prepare(query <span class="type">string</span>) (*sql.Stmt, <span class="type">error</span>)</span><br><span class="line">ExecContext(ctx context.Context, query <span class="type">string</span>, args ...any) (sql.Result, <span class="type">error</span>)</span><br><span class="line">Exec(query <span class="type">string</span>, args ...any) (sql.Result, <span class="type">error</span>)</span><br><span class="line">QueryContext(ctx context.Context, query <span class="type">string</span>, args ...any) (*sql.Rows, <span class="type">error</span>)</span><br><span class="line">Query(query <span class="type">string</span>, args ...any) (*sql.Rows, <span class="type">error</span>)</span><br><span class="line">QueryRowContext(ctx context.Context, query <span class="type">string</span>, args ...any) *sql.Row</span><br><span class="line">QueryRow(query <span class="type">string</span>, args ...any) *sql.Row</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是伪代码，以操作 user 表为例, 定义 IUserRepository 接口并实现这个接口</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> repository</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> IUserRepository <span class="keyword">interface</span> &#123;</span><br><span class="line">InsertUser(ctx context.Context, user *User) <span class="type">error</span></span><br><span class="line">GettUserById(ctx context.Context, id <span class="type">int64</span>) (*User, <span class="type">error</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> UserRepository <span class="keyword">struct</span> &#123;</span><br><span class="line">db database.DB</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewUserRepository</span><span class="params">(db database.DB)</span></span> *UserRepository &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;UserRepository&#123;db: db&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *UserRepository)</span></span> WithTx(tx *sql.Tx) *UserRepository &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;UserRepository&#123;db: tx&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *UserRepository)</span></span> InsertUser(ctx context.Context, user *User) <span class="type">error</span> &#123;</span><br><span class="line">_, err := r.db.ExecContext(ctx, <span class="string">&quot;insert into user ...&quot;</span>, user.Name)</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *UserRepository)</span></span> GettUserById(ctx context.Context, id <span class="type">int64</span>) (*User, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> user User</span><br><span class="line"><span class="keyword">if</span> err := r.db.QueryRowContext(ctx, <span class="string">&quot;select id, name from user ...&quot;</span>, id).Scan(&amp;user.Id, &amp;user.Name); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;user, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 repository 的上层使用事务</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> usecase</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> UserUsecase <span class="keyword">struct</span> &#123;</span><br><span class="line">UserRepository repository.IUserRepository</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *UserUsecase)</span></span> AddUser(ctx context.Context, user *User) <span class="type">error</span> &#123;</span><br><span class="line">tx, err := database.GetDB().Begin()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> tx.Rollback()</span><br><span class="line"></span><br><span class="line">err = u.UserRepository.WithTx(tx).InsertUser(ctx, user)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// some other transactions ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> tx.Commit()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不想手写开始事务和提交事务，可以参照 <code>github.com/jackc/pgx/v4</code> 中的 <code>(*Pool).BeginFunc</code> 自己封装一个专门用来执行事务的方法。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> transactions </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 Go 中使用 pprof 工具</title>
      <link href="/posts/338086b9/"/>
      <url>/posts/338086b9/</url>
      
        <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>下载并安装 Graphviz 工具</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://graphviz.org/download/</span><br></pre></td></tr></table></figure><h2 id="在代码中引入-pprof-包"><a href="#在代码中引入-pprof-包" class="headerlink" title="在代码中引入 pprof 包"></a>在代码中引入 pprof 包</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="string">&quot;net/http/pprof&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        log.Println(http.ListenAndServe(<span class="string">&quot;:6060&quot;</span>, <span class="literal">nil</span>))</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// do something...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>浏览器打开 <code>http://localhost:6060/debug/pprof/</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;runtime/pprof&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/pkg/profile&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Handle</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    f, _ := os.OpenFile(<span class="string">&quot;cpu.pprof&quot;</span>, os.O_CREATE|os.O_RDWR, <span class="number">0644</span>)</span><br><span class="line">    <span class="keyword">defer</span> f.Close()</span><br><span class="line">    pprof.StartCPUProfile(f)</span><br><span class="line">    <span class="keyword">defer</span> pprof.StopCPUProfile()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">defer</span> profile.Start().Stop()</span><br><span class="line">    <span class="keyword">defer</span> profile.Start(profile.MemProfile).Stop()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// do something...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go tool pprof cpu.pprof</span><br><span class="line">go tool pprof -http=:9999 cpu.pprof</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在多个 gRPC 服务之间使用链路追踪</title>
      <link href="/posts/5a43dcd/"/>
      <url>/posts/5a43dcd/</url>
      
        <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>安装并启动 jaeger</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --rm --name jaeger \</span><br><span class="line">  -e COLLECTOR_ZIPKIN_HOST_PORT=:9411 \</span><br><span class="line">  -e COLLECTOR_OTLP_ENABLED=true \</span><br><span class="line">  -p 6831:6831/udp \</span><br><span class="line">  -p 6832:6832/udp \</span><br><span class="line">  -p 5778:5778 \</span><br><span class="line">  -p 16686:16686 \</span><br><span class="line">  -p 4317:4317 \</span><br><span class="line">  -p 4318:4318 \</span><br><span class="line">  -p 14250:14250 \</span><br><span class="line">  -p 14268:14268 \</span><br><span class="line">  -p 14269:14269 \</span><br><span class="line">  -p 9411:9411 \</span><br><span class="line">  jaegertracing/all-in-one:1.35</span><br></pre></td></tr></table></figure><h2 id="初始化-TracerProvider"><a href="#初始化-TracerProvider" class="headerlink" title="初始化 TracerProvider"></a>初始化 TracerProvider</h2><p>初始化一个 <code>TracerProvider</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> trace</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;go.opentelemetry.io/otel&quot;</span></span><br><span class="line"><span class="string">&quot;go.opentelemetry.io/otel/attribute&quot;</span></span><br><span class="line"><span class="string">&quot;go.opentelemetry.io/otel/exporters/jaeger&quot;</span></span><br><span class="line"><span class="string">&quot;go.opentelemetry.io/otel/sdk/resource&quot;</span></span><br><span class="line">tracesdk <span class="string">&quot;go.opentelemetry.io/otel/sdk/trace&quot;</span></span><br><span class="line">semconv <span class="string">&quot;go.opentelemetry.io/otel/semconv/v1.10.0&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TracerProviderInit</span><span class="params">(url, serviceName, environment <span class="type">string</span>)</span></span> (*tracesdk.TracerProvider, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="comment">// Create the Jaeger exporter</span></span><br><span class="line">exp, err := jaeger.New(jaeger.WithCollectorEndpoint(jaeger.WithEndpoint(url)))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">TP := tracesdk.NewTracerProvider(</span><br><span class="line"><span class="comment">// Always be sure to batch in production.</span></span><br><span class="line">tracesdk.WithBatcher(exp),</span><br><span class="line"><span class="comment">// Record information about this application in a Resource.</span></span><br><span class="line">tracesdk.WithResource(resource.NewWithAttributes(</span><br><span class="line">semconv.SchemaURL,</span><br><span class="line">semconv.ServiceNameKey.String(serviceName),</span><br><span class="line">attribute.String(<span class="string">&quot;environment&quot;</span>, environment),</span><br><span class="line">attribute.Int64(<span class="string">&quot;ID&quot;</span>, <span class="number">1</span>),</span><br><span class="line">)),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Register our TracerProvider as the global so any imported</span></span><br><span class="line"><span class="comment">// instrumentation in the future will default to using it.</span></span><br><span class="line">otel.SetTracerProvider(TP)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> TP, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">ctx, cancel := context.WithCancel(context.Background())</span><br><span class="line"><span class="keyword">defer</span> cancel()</span><br><span class="line"></span><br><span class="line">tp, err := trace.TracerProviderInit(<span class="string">&quot;http://localhost:14268/api/traces&quot;</span>, <span class="string">&quot;myapp&quot;</span>, <span class="string">&quot;dev&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;Failed to InitTracerProvider: %v\n&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">err := tp.Shutdown(ctx)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;tp.Shutdown err: %v\n&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="添加-otelgrpc-中间件"><a href="#添加-otelgrpc-中间件" class="headerlink" title="添加 otelgrpc 中间件"></a>添加 <code>otelgrpc</code> 中间件</h2><p>服务端添加 <code>otelgrpc</code> 中间件</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc&quot;</span></span><br><span class="line"><span class="string">&quot;google.golang.org/grpc&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GrpcServerRun</span><span class="params">()</span></span> &#123;</span><br><span class="line">opts := []grpc.ServerOption&#123;</span><br><span class="line">grpc.UnaryInterceptor(otelgrpc.UnaryServerInterceptor()),</span><br><span class="line">grpc.StreamInterceptor(otelgrpc.StreamServerInterceptor()),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// create new gRPC server</span></span><br><span class="line">server := grpc.NewServer(opts...)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// listen grpc server...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端添加 <code>otelgrpc</code> 中间件</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc&quot;</span></span><br><span class="line"><span class="string">&quot;google.golang.org/grpc&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GrpcServerDial</span><span class="params">(ctx context.Context, addr <span class="type">string</span>)</span></span> *grpc.ClientConn &#123;</span><br><span class="line">opts := []grpc.DialOption&#123;</span><br><span class="line">grpc.WithUnaryInterceptor(otelgrpc.UnaryClientInterceptor()),</span><br><span class="line">grpc.WithStreamInterceptor(otelgrpc.StreamClientInterceptor()),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">conn, err := grpc.DialContext(ctx, addr, opts...)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;Dial grpc err: %+v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> conn</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>gin</code> 添加 <code>otelgin</code> 中间件</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="string">&quot;go.opentelemetry.io/contrib/instrumentation/github.com/gin-gonic/gin/otelgin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewRouter http routes</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewRouter</span><span class="params">(handle *gin.Engine)</span></span> &#123;</span><br><span class="line">handle.Use(otelgin.Middleware(<span class="string">&quot;gin-server&quot;</span>))</span><br><span class="line"></span><br><span class="line">handle.GET(<span class="string">&quot;/healthz&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123; c.Status(http.StatusOK) &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在 <code>HelloService</code> 里请求 <code>PetStoreService</code> 的 <code>GetPet</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *HelloService)</span></span> SayHello(ctx context.Context, request *hellov1.SayHelloRequest) (*hellov1.SayHelloResponse, <span class="type">error</span>) &#123;</span><br><span class="line"></span><br><span class="line">ctx = metadata.NewOutgoingContext(ctx, metadata.Pairs())</span><br><span class="line"></span><br><span class="line">getPetResponse, err := petStoreClient.GetPet(ctx, &amp;petv1.GetPetRequest&#123;PetId: <span class="number">1</span>&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &amp;hellov1.SayHelloResponse&#123;Age: <span class="type">int64</span>(getPetResponse.Pet.GetPetType())&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>最后，请求一次这个服务之后，刷新 <code>http://localhost:16686/search</code>。</p><blockquote><p>参考<br><a href="https://opentelemetry.io/docs/">https://opentelemetry.io/docs/</a><br><a href="https://www.jaegertracing.io/docs/1.35/">https://www.jaegertracing.io/docs/1.35/</a><br><a href="https://github.com/open-telemetry/opentelemetry-go-contrib">https://github.com/open-telemetry/opentelemetry-go-contrib</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> gRPC </tag>
            
            <tag> OpenTelemetry </tag>
            
            <tag> Jaeger </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PostgreSQL 备份与恢复</title>
      <link href="/posts/5790da06/"/>
      <url>/posts/5790da06/</url>
      
        <content type="html"><![CDATA[<h2 id="查看磁盘占用情况"><a href="#查看磁盘占用情况" class="headerlink" title="查看磁盘占用情况"></a>查看磁盘占用情况</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> schemaname, relname, pg_size_pretty(pg_total_relation_size(relid)) <span class="keyword">AS</span> size <span class="keyword">FROM</span> pg_catalog.pg_statio_user_tables <span class="keyword">ORDER</span> <span class="keyword">BY</span> pg_total_relation_size(relid) <span class="keyword">DESC</span> LIMIT <span class="number">10</span>;</span><br></pre></td></tr></table></figure><h2 id="备份单个数据库"><a href="#备份单个数据库" class="headerlink" title="备份单个数据库"></a>备份单个数据库</h2><p><code>-h</code> 和 <code>-p</code> 可以省略，默认备份成纯文本格式。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">备份成 sql 文件</span></span><br><span class="line">pg_dump -U postgres --encoding utf8 -f dumpfile.sql dbname</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从 sql 文件恢复</span></span><br><span class="line">psql -U postgres -l</span><br><span class="line">createdb -U postgres -T template0 new_dbname</span><br><span class="line">psql -U postgres --encoding utf8 -d new_dbname -f dumpfile.sql # 15</span><br><span class="line">psql -U postgres -encoding=utf8 -d new_dbname -f dumpfile.sql # 16</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">备份成自定义格式</span></span><br><span class="line">pg_dump -U postgres --encoding utf8 -F c -f dumpfile.bak dbname</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从自定义格式恢复</span></span><br><span class="line">pg_restore -U postgres -d new_dbname dumpfile.bak</span><br></pre></td></tr></table></figure><h2 id="备份所有数据库"><a href="#备份所有数据库" class="headerlink" title="备份所有数据库"></a>备份所有数据库</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">备份，使用 pg_dumpall 这个命令的时候，有几个数据库，就需要输入几次数据库密码</span></span><br><span class="line">pg_dumpall -U postgres --encoding utf8 -f dumpfile_all.sql</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">恢复</span></span><br><span class="line">psql -f dumpfile_all.sql postgres</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 备忘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PostgreSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 gRPC 中使用中间件</title>
      <link href="/posts/fedcb43a/"/>
      <url>/posts/fedcb43a/</url>
      
        <content type="html"><![CDATA[<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/grpc-ecosystem/go-grpc-middleware&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> gRPC </tag>
            
            <tag> gRPC-middleware </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 PostgreSQL 实现全文搜索</title>
      <link href="/posts/6b725fb3/"/>
      <url>/posts/6b725fb3/</url>
      
        <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>首先创建一张表, title 和 body 存储的是普通的文本内容， doc_tokens 是 <code>tsverctor</code> 类型, <code>body</code> 经过解析之后的内容会放入 <code>doc_tokens</code> 中</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> &quot;public&quot;.&quot;pgweb&quot; (</span><br><span class="line">&quot;id&quot; <span class="type">serial8</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">&quot;title&quot; <span class="type">VARCHAR</span> ( <span class="number">255</span> ) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">&quot;body&quot; <span class="type">VARCHAR</span> ( <span class="number">255</span> ) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">&quot;doc_tokens&quot; <span class="type">tsvector</span>,</span><br><span class="line"><span class="keyword">CONSTRAINT</span> &quot;pgweb_pkey&quot; <span class="keyword">PRIMARY KEY</span> ( &quot;id&quot; ) </span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>在 <code>doc_tokens</code> 列上创建一个名为 <code>textsearch_idx</code> 的 <code>GIN</code> 类型的索引</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> textsearch_idx <span class="keyword">ON</span> pgweb <span class="keyword">USING</span> GIN (doc_tokens);</span><br></pre></td></tr></table></figure><h2 id="tsvector-和-tsquery"><a href="#tsvector-和-tsquery" class="headerlink" title="tsvector 和 tsquery"></a><code>tsvector</code> 和 <code>tsquery</code></h2><p>要想实现全文搜索，首先要把需要搜索的文档解析成容易被计算机搜索到的数据格式。至于如何解析，这里暂不细说，下面主要介绍把文档解析之后 PostgreSQL 所做的事情。</p><blockquote><p>关于文档解析, 因为 PostgreSQL 目前（14.0）不支持中文分词，所以要想解析中文文档，需要安装第三方插件，或者在程序里使用第三方库进行分词。</p></blockquote><p>首先介绍 PostgreSQL 中的两个数据类型 <code>tsvector</code> 和 <code>tsquery</code>, 两个方法 <code>to_tsvector()</code> <code>to_tsquery()</code></p><p><code>tsvector</code> 用来存储解析后的文本, <code>tsquery</code> 用来存储要搜索的关键字。</p><p><code>to_tsvector()</code> 会把传入的文本转为 <code>tsvector</code> 类型, <code>to_tsquery()</code> 会把传入的文本解析为 <code>tsquery</code> 类型。</p><p>两种用法如下：</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> pgweb <span class="keyword">SET</span> doc_tokens = to_tsvector(<span class="string">&#x27;english&#x27;</span>, body);</span><br><span class="line"><span class="keyword">UPDATE</span> pgweb <span class="keyword">SET</span> doc_tokens = to_tsvector(<span class="string">&#x27;SIMPLE&#x27;</span>, <span class="string">&#x27;阿猫 阿狗 什么&#x27;</span>);</span><br><span class="line"><span class="keyword">UPDATE</span> pgweb <span class="keyword">SET</span> doc_tokens = setweight(to_tsvector(COALESCE(body, <span class="string">&#x27;&#x27;</span>)), <span class="string">&#x27;A&#x27;</span>) || setweight(to_tsvector(COALESCE(title, <span class="string">&#x27;&#x27;</span>)), <span class="string">&#x27;B&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> body <span class="keyword">FROM</span> pgweb <span class="keyword">WHERE</span> doc_tokens @@ to_tsquery(<span class="string">&#x27;SIMPLE&#x27;</span>, <span class="string">&#x27;阿猫 &amp; 阿狗&#x27;</span>);</span><br><span class="line"><span class="comment">-- 如果这里要匹配中文，要把 english 替换为中文分词插件</span></span><br><span class="line"><span class="keyword">SELECT</span> title <span class="keyword">FROM</span> pgweb <span class="keyword">WHERE</span> to_tsvector(<span class="string">&#x27;english&#x27;</span>, body) @@ to_tsquery(<span class="string">&#x27;english&#x27;</span>, <span class="string">&#x27;friend | old friend&#x27;</span>);</span><br></pre></td></tr></table></figure><p><code>@@</code> 运算符会把 <code>tsvector</code> 和 <code>tsquery</code> 进行匹配，如果结果为 true 则返回。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PostgreSQL </tag>
            
            <tag> Full Text Search </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 Go 中使用 Etcd 作为服务注册中心</title>
      <link href="/posts/850b06a1/"/>
      <url>/posts/850b06a1/</url>
      
        <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>安装并启动 etcd</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://etcd.io/docs/v3.5/install/</span><br><span class="line">https://github.com/etcd-io/etcd/releases/</span><br></pre></td></tr></table></figure><h2 id="初始化-etcd-客户端"><a href="#初始化-etcd-客户端" class="headerlink" title="初始化 etcd 客户端"></a>初始化 etcd 客户端</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> etcd</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line"></span><br><span class="line">clientv3 <span class="string">&quot;go.etcd.io/etcd/client/v3&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">etcdClient = &amp;clientv3.Client&#123;&#125;</span><br><span class="line">once       = &amp;sync.Once&#123;&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">EtcdInit</span><span class="params">(addr <span class="type">string</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> err <span class="type">error</span></span><br><span class="line"></span><br><span class="line">once.Do(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">etcdClient, err = clientv3.NewFromURL(addr)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;etcd init error, err: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">EtcdClient</span><span class="params">()</span></span> *clientv3.Client &#123;</span><br><span class="line"><span class="keyword">return</span> etcdClient</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="把服务注册进-etcd"><a href="#把服务注册进-etcd" class="headerlink" title="把服务注册进 etcd"></a>把服务注册进 etcd</h2><p><code>serviceName</code> 是要往 etcd 中注册的服务名称，<code>endpoint</code> 是这个服务的地址</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;etcd-grpc-go/etcd&quot;</span></span><br><span class="line"><span class="string">&quot;go.etcd.io/etcd/client/v3/naming/endpoints&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Registry</span><span class="params">(ctx context.Context, serviceName, endpoint <span class="type">string</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line"></span><br><span class="line">client := etcd.EtcdClient()</span><br><span class="line"></span><br><span class="line">em, err := endpoints.NewManager(client, serviceName)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">err = em.AddEndpoint(ctx, serviceName+<span class="string">&quot;/1&quot;</span>, endpoints.Endpoint&#123;Addr: endpoint&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">err := Registry(context.Background(), <span class="string">&quot;petservice&quot;</span>, <span class="string">&quot;localhost:9090&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;registry err: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="从-etcd-中获取一个服务"><a href="#从-etcd-中获取一个服务" class="headerlink" title="从 etcd 中获取一个服务"></a>从 etcd 中获取一个服务</h2><p><code>addr</code> 是 etcd 服务的地址，<code>serviceName</code> 是上一步注册进 etcd 的服务名称</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;etcd-grpc-go/etcd&quot;</span></span><br><span class="line"><span class="string">&quot;go.etcd.io/etcd/client/v3/naming/resolver&quot;</span></span><br><span class="line"><span class="string">&quot;google.golang.org/grpc&quot;</span></span><br><span class="line"><span class="string">&quot;google.golang.org/grpc/credentials/insecure&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Discovery</span><span class="params">(ctx context.Context, addr, serviceName <span class="type">string</span>)</span></span> (*grpc.ClientConn, <span class="type">error</span>) &#123;</span><br><span class="line"></span><br><span class="line">client := etcd.EtcdClient()</span><br><span class="line"></span><br><span class="line">etcdResolver, err := resolver.NewBuilder(client)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;etcd resolver err: %w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">opts := []grpc.DialOption&#123;</span><br><span class="line">grpc.WithDefaultServiceConfig(<span class="string">`&#123;&quot;loadBalancingPolicy&quot;: &quot;round_robin&quot;&#125;`</span>),</span><br><span class="line">grpc.WithTransportCredentials(insecure.NewCredentials()),</span><br><span class="line">grpc.WithResolvers(etcdResolver),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">target := fmt.Sprintf(<span class="string">&quot;etcd://%s/%s&quot;</span>, addr, serviceName)</span><br><span class="line"></span><br><span class="line">conn, err := grpc.DialContext(ctx, target, opts...)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;Dial grpc err: %w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> conn, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">conn, err := Discovery(context.Background(), <span class="string">&quot;localhost:2379&quot;</span>, <span class="string">&quot;petservice&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;discovery err: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">petStoreServiceClient := petv1.NewPetStoreServiceClient(conn)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> gRPC </tag>
            
            <tag> etcd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 Go 中使用 gRPC-Gateway</title>
      <link href="/posts/65fb2554/"/>
      <url>/posts/65fb2554/</url>
      
        <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>安装 <code>protoc</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://grpc.io/docs/protoc-installation/</span><br></pre></td></tr></table></figure><p>安装 grpc 插件 和 buf 工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway@latest</span><br><span class="line">go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2@latest</span><br><span class="line">go install google.golang.org/protobuf/cmd/protoc-gen-go@latest</span><br><span class="line">go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest</span><br><span class="line">go install github.com/bufbuild/buf/cmd/buf@latest</span><br></pre></td></tr></table></figure><p>下载 <code>google/api</code> 文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/googleapis/googleapis</span><br></pre></td></tr></table></figure><h2 id="编写-proto-文件"><a href="#编写-proto-文件" class="headerlink" title="编写 proto 文件"></a>编写 proto 文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">syntax = &quot;proto3&quot;;</span><br><span class="line"></span><br><span class="line">package pet.v1;</span><br><span class="line"></span><br><span class="line">option go_package = &quot;.;petv1&quot;;</span><br><span class="line"></span><br><span class="line">import &quot;google/api/annotations.proto&quot;;</span><br><span class="line">import &quot;google/type/datetime.proto&quot;;</span><br><span class="line"></span><br><span class="line">// PetType represents the different types of pets in the pet store.</span><br><span class="line">enum PetType &#123;</span><br><span class="line">  PET_TYPE_UNSPECIFIED = 0;</span><br><span class="line">  PET_TYPE_CAT = 1;</span><br><span class="line">  PET_TYPE_DOG = 2;</span><br><span class="line">  PET_TYPE_SNAKE = 3;</span><br><span class="line">  PET_TYPE_HAMSTER = 4;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Pet represents a pet in the pet store.</span><br><span class="line">message Pet &#123;</span><br><span class="line">  PetType pet_type = 1;</span><br><span class="line">  string pet_id = 2;</span><br><span class="line">  string name = 3;</span><br><span class="line">  google.type.DateTime created_at = 4;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message GetPetRequest &#123;</span><br><span class="line">  string pet_id = 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message GetPetResponse &#123;</span><br><span class="line">  Pet pet = 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">service PetStoreService &#123;</span><br><span class="line">  rpc GetPet(GetPetRequest) returns (GetPetResponse) &#123;</span><br><span class="line">    option (google.api.http) = &#123;</span><br><span class="line">      get: &quot;/v1/pet/&#123;pet_id&#125;&quot;</span><br><span class="line">      body: &quot;*&quot;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="生成-go-代码"><a href="#生成-go-代码" class="headerlink" title="生成 go 代码"></a>生成 go 代码</h2><p>这里使用 protoc 工具生成</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">protoc -I . \</span><br><span class="line">--proto_path=. \</span><br><span class="line">--go_out ./gen/go/ --go_opt paths=source_relative \</span><br><span class="line">--go-grpc_out ./gen/go/ --go-grpc_opt paths=source_relative \</span><br><span class="line">--grpc-gateway_out ./gen/go/ \</span><br><span class="line">--grpc-gateway_opt logtostderr=<span class="literal">true</span> \</span><br><span class="line">--grpc-gateway_opt paths=source_relative \</span><br><span class="line">--grpc-gateway_opt generate_unbound_methods=<span class="literal">true</span> \</span><br><span class="line">api/petapis/pet/v1/pet.proto</span><br></pre></td></tr></table></figure><h2 id="创建-grpc-server-和-http-server"><a href="#创建-grpc-server-和-http-server" class="headerlink" title="创建 grpc server 和 http server"></a>创建 grpc server 和 http server</h2><p>实现 <code>petv1.PetStoreServiceServer</code> 接口</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> PetService <span class="keyword">struct</span> &#123;</span><br><span class="line">petv1.UnimplementedPetStoreServiceServer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ps *PetService)</span></span> GetPet(ctx context.Context, request *petv1.GetPetRequest) (*petv1.GetPetResponse, <span class="type">error</span>) &#123;</span><br><span class="line"></span><br><span class="line">petId := request.GetPetId()</span><br><span class="line"></span><br><span class="line">pet := &amp;petv1.Pet&#123;</span><br><span class="line">PetType:   petv1.PetType_PET_TYPE_DOG,</span><br><span class="line">PetId:     petId,</span><br><span class="line">Name:      <span class="string">&quot;dog&quot;</span>,</span><br><span class="line">CreatedAt: <span class="literal">nil</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &amp;petv1.GetPetResponse&#123;Pet: pet&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建 grpc server</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">runGrpcServer</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// create new gRPC server</span></span><br><span class="line">server := grpc.NewServer()</span><br><span class="line"><span class="comment">// register the GreeterServerImpl on the gRPC server</span></span><br><span class="line">petv1.RegisterPetStoreServiceServer(server, &amp;PetService&#123;&#125;)</span><br><span class="line"><span class="comment">// start listening on port :8080 for a tcp connection</span></span><br><span class="line"><span class="keyword">if</span> l, err := net.Listen(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;:9001&quot;</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">&quot;error in listening on port :9001&quot;</span>, err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// the start gRPC server</span></span><br><span class="line"><span class="keyword">if</span> err := server.Serve(l); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">&quot;unable to start server&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建 http server</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">runhttpServer</span><span class="params">()</span></span> <span class="type">error</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> runGrpcServer()</span><br><span class="line"></span><br><span class="line">ctx, cancel := context.WithCancel(context.Background())</span><br><span class="line"><span class="keyword">defer</span> cancel()</span><br><span class="line"></span><br><span class="line">mux := runtime.NewServeMux()</span><br><span class="line"></span><br><span class="line">opts := []grpc.DialOption&#123;grpc.WithTransportCredentials(insecure.NewCredentials())&#125;</span><br><span class="line"></span><br><span class="line">err := petv1.RegisterPetStoreServiceHandlerFromEndpoint(ctx, mux, <span class="string">&quot;localhost:9001&quot;</span>, opts)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Start HTTP server (and proxy calls to gRPC server endpoint)</span></span><br><span class="line">httpServer := httpserver.New(mux, httpserver.Port(<span class="string">&quot;8001&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// Waiting signal</span></span><br><span class="line">interrupt := <span class="built_in">make</span>(<span class="keyword">chan</span> os.Signal, <span class="number">1</span>)</span><br><span class="line">signal.Notify(interrupt, os.Interrupt, syscall.SIGTERM)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> s := &lt;-interrupt:</span><br><span class="line">log.Printf(<span class="string">&quot;app - Run - signal: &quot;</span> + s.String())</span><br><span class="line"><span class="keyword">case</span> err = &lt;-httpServer.Notify():</span><br><span class="line">log.Println(fmt.Errorf(<span class="string">&quot;app - Run - httpServer.Notify: %w&quot;</span>, err))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Shutdown</span></span><br><span class="line">err = httpServer.Shutdown()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Println(fmt.Errorf(<span class="string">&quot;app - Run - httpServer.Shutdown: %w&quot;</span>, err))</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 gin 框架</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server := gin.New()</span><br><span class="line">server.Use(gin.Logger())</span><br><span class="line">server.Group(<span class="string">&quot;v1/*&#123;grpc_gateway&#125;&quot;</span>).Any(<span class="string">&quot;&quot;</span>, gin.WrapH(mux))</span><br><span class="line"></span><br><span class="line">server.GET(<span class="string">&quot;/test&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.String(http.StatusOK, <span class="string">&quot;Ok&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">httpServer := httpserver.New(server, httpserver.Port(<span class="string">&quot;8001&quot;</span>))</span><br></pre></td></tr></table></figure><p>启动服务之后，发送 http 请求</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET http://localhost:8080/v1/pet/abc</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;pet&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;petType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;PET_TYPE_DOG&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;petId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;abc&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dog&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;createdAt&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>目录结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── api</span><br><span class="line">│   └── petapis     </span><br><span class="line">│       ├── buf.lock</span><br><span class="line">│       ├── buf.yaml</span><br><span class="line">│       └── pet     </span><br><span class="line">│           └── v1</span><br><span class="line">│               └── pet.proto</span><br><span class="line">├── buf.gen.yaml</span><br><span class="line">├── buf.work.yaml</span><br><span class="line">├── go.mod</span><br><span class="line">├── go.sum</span><br><span class="line">├── google</span><br><span class="line">│   ├── api</span><br><span class="line">│   │   ├── annotations.proto</span><br><span class="line">│   │   ├── field_behavior.proto</span><br><span class="line">│   │   ├── http.proto</span><br><span class="line">│   │   └── httpbody.proto</span><br><span class="line">│   └── type</span><br><span class="line">│       └── datetime.proto</span><br><span class="line">├── httpserver</span><br><span class="line">│   ├── options.go</span><br><span class="line">│   └── server.go</span><br><span class="line">└── main.go</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> gRPC </tag>
            
            <tag> gRPC-Gateway </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode for go</title>
      <link href="/posts/edd9ae5c/"/>
      <url>/posts/edd9ae5c/</url>
      
        <content type="html"><![CDATA[<h2 id="启动调试"><a href="#启动调试" class="headerlink" title="启动调试"></a>启动调试</h2><p><code>launch.json</code> 内容如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;go&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;mode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;auto&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;/main.go&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;envFile&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;/.env.example&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceRoot&#125;&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>配置好 <code>launch.json</code> 后就可以按 <code>F5</code> 调试程序了。</p><h2 id="修改结构体的-json-tag-风格"><a href="#修改结构体的-json-tag-风格" class="headerlink" title="修改结构体的 json tag 风格"></a>修改结构体的 <code>json tag</code> 风格</h2><p>vscode 中的 go 插件使用 <a href="https://github.com/fatih/gomodifytags">gomodifytags</a> 生成 <code>json tag</code> , 默认生成的 <code>json tag</code> 风格是 <code>snakecase</code> ，在 <code>setting.json</code> 中添加以下配置，即可改为 <code>camelcase</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;go.addTags&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;tags&quot;</span><span class="punctuation">:</span> <span class="string">&quot;json&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;options&quot;</span><span class="punctuation">:</span> <span class="string">&quot;json=omitempty&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;promptForTags&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;transform&quot;</span><span class="punctuation">:</span> <span class="string">&quot;camelcase&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;template&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>根据官方文档的介绍，<code>transform</code> 字段有这些选项：<code>snakecase</code>, <code>camelcase</code>, <code>lispcase</code>, <code>pascalcase</code>, <code>keep</code></p><p>参考链接：</p><ul><li><a href="https://github.com/golang/vscode-go/blob/master/docs/settings.md">vscode-go&#x2F;settings.md at master · golang&#x2F;vscode-go (github.com)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go 注意事项</title>
      <link href="/posts/ad9abcd3/"/>
      <url>/posts/ad9abcd3/</url>
      
        <content type="html"><![CDATA[<h3 id="在-Go-中使用-stringer-tool"><a href="#在-Go-中使用-stringer-tool" class="headerlink" title="在 Go 中使用 stringer tool"></a>在 Go 中使用 stringer tool</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go install golang.org/x/tools/cmd/stringer@latest</span><br></pre></td></tr></table></figure><p>定义一个 ErrCode 类型</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ErrCode <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">ERR_CODE_OK             ErrCode = <span class="number">0</span> <span class="comment">// OK</span></span><br><span class="line">ERR_CODE_INVALID_PARAMS ErrCode = <span class="number">1</span> <span class="comment">// 无效参数</span></span><br><span class="line">ERR_CODE_TIMEOUT        ErrCode = <span class="number">2</span> <span class="comment">// 超时</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>返回变量名</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//go:generate stringer -type ErrCode -output code_string.go</span></span><br></pre></td></tr></table></figure><p>返回注释</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//go:generate stringer -type ErrCode -linecomment -output code_string.go</span></span><br></pre></td></tr></table></figure><h3 id="Go检测类型是否实现接口"><a href="#Go检测类型是否实现接口" class="headerlink" title="Go检测类型是否实现接口"></a>Go检测类型是否实现接口</h3><p>有时候会看到这种代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _ IRouter = &amp;Engine&#123;&#125;</span><br></pre></td></tr></table></figure><p>IRouter是一个接口类型，Engine是自定义的结构体，这行代码的意思是在编译前检测这个*Engine类型有没有实现IRouter接口，没有就会报错，编译就不会通过。</p><h3 id="字符串的长度和遍历字符串"><a href="#字符串的长度和遍历字符串" class="headerlink" title="字符串的长度和遍历字符串"></a>字符串的长度和遍历字符串</h3><p>直接使用 <code>len</code> 关键字返回的是字节长度，要获取一个字符串的长度，需要使用 <code>utf8.RuneCountInString</code> 方法。</p><p>遍历一个字符串的时候，遍历的是这个字符对应的一个别名为 <code>rune</code> 的 <code>int32</code> 类型的整数，这个整数对应 <code>Unicode</code> 码点的范围（U+0000 到 U+10FFFF），如果要打印出这个字符的 <code>Unicode</code> 码点, 使用 <code>%U</code> 格式化，如果要打印出这个码点对应的字符，使用 <code>%c</code> 格式化，如果要把 <code>rune</code> 类型转为 <code>string</code> 类型，使用 <code>string</code> 类型转换。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="type">rune</span> = <span class="string">&#x27;😀&#x27;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;a: %v, %U, %c, %s\n&quot;</span>, a, a, a, <span class="type">string</span>(a))</span><br><span class="line"></span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// a: 128512, U+1F600, 😀, 😀</span></span><br></pre></td></tr></table></figure><h3 id="errors-As"><a href="#errors-As" class="headerlink" title="errors.As()"></a>errors.As()</h3><p>errors.As() 的第二个参数必须是一个非空指针，指向一个实现了error接口的类型，或者是任何接口类型。如果是自定义的类型 A 用指针接收者实现的 error 接口，传参的时候就必须传递一个双重指针。</p><p><strong>1、<code>go build</code>的时候无法build</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmd\app\main.go:9:2: //go:build comment without // +build comment</span><br></pre></td></tr></table></figure><p>在网上没有搜到相关的问题。很明显这不是代码错误，我感觉是我本地的golang版本(1.16)与项目的版本(1.17)不一致导致的，于是我升级了我的golang版本，问题解决了。</p><h3 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h3><p>“延迟调用的参数会立即被计算，但函数调用在周围的函数返回之前不会执行”。</p><p><strong>2、往MariaDB(MySQL)里存储emoji时报错</strong></p><p>按照网上说的已经把数据库和表的字符集编码都设置为utf8bm4和还是会报这个错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error 1366: Incorrect string value: &#x27;\xF0\x9F\xA4\xA1&#x27; for column `test`.`customer`.`name` at row 1</span><br></pre></td></tr></table></figure><p>最后看了一下连接数据库的URL，发现charset的值为utf8，把charset的值改为utf8bm4就可以了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root:password@tcp(localhost:3306)/databasename?parseTime=True&amp;loc=Local&amp;charset=utf8mb4&amp;collation=utf8mb4_unicode_ci</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Publish Package</title>
      <link href="/posts/d0e222da/"/>
      <url>/posts/d0e222da/</url>
      
        <content type="html"><![CDATA[<h2 id="Python-Package"><a href="#Python-Package" class="headerlink" title="Python Package"></a>Python Package</h2><h3 id="1-注册-PyPI-账号"><a href="#1-注册-PyPI-账号" class="headerlink" title="1. 注册 PyPI 账号"></a>1. 注册 <a href="https://pypi.org/">PyPI</a> 账号</h3><h3 id="2-安装package"><a href="#2-安装package" class="headerlink" title="2. 安装package"></a>2. 安装package</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install <span class="literal">--upgrade</span> build</span><br><span class="line">pip install <span class="literal">--upgrade</span> twine</span><br></pre></td></tr></table></figure><h3 id="3-创建package文件"><a href="#3-创建package文件" class="headerlink" title="3. 创建package文件"></a>3. 创建package文件</h3><p>package里的文件应该这样组织：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">packaging_tutorial/</span><br><span class="line">├── LICENSE</span><br><span class="line">├── pyproject.toml</span><br><span class="line">├── README.md</span><br><span class="line">├── setup.cfg</span><br><span class="line">├── src/</span><br><span class="line">│   └── example_package/</span><br><span class="line">│       ├── __init__.py</span><br><span class="line">│       └── example.py</span><br><span class="line">└── tests/</span><br></pre></td></tr></table></figure><p>LICENSE：<a href="https://choosealicense.com/">choosealicense</a></p><p>pyproject.toml：构建工具的配置文件</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[build-system]</span></span><br><span class="line"><span class="attr">requires</span> = [</span><br><span class="line">    <span class="string">&quot;setuptools&gt;=42&quot;</span>,</span><br><span class="line">    <span class="string">&quot;wheel&quot;</span></span><br><span class="line">]</span><br><span class="line"><span class="attr">build-backend</span> = <span class="string">&quot;setuptools.build_meta&quot;</span></span><br></pre></td></tr></table></figure><p>setup.cfg：静态元数据，配置这个package的基本属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[metadata]</span><br><span class="line">name = example-pkg-YOUR-USERNAME-HERE</span><br><span class="line">version = 0.0.1</span><br><span class="line">author = Example Author</span><br><span class="line">author_email = author@example.com</span><br><span class="line">description = A small example package</span><br><span class="line">long_description = file: README.md</span><br><span class="line">long_description_content_type = text/markdown</span><br><span class="line">url = https://github.com/pypa/sampleproject</span><br><span class="line">project_urls =</span><br><span class="line">    Bug Tracker = https://github.com/pypa/sampleproject/issues</span><br><span class="line">classifiers =</span><br><span class="line">    Programming Language :: Python :: 3</span><br><span class="line">    License :: OSI Approved :: MIT License</span><br><span class="line">    Operating System :: OS Independent</span><br><span class="line"></span><br><span class="line">[options]</span><br><span class="line">package_dir =</span><br><span class="line">    = src</span><br><span class="line">packages = find:</span><br><span class="line">python_requires = &gt;=3.6</span><br><span class="line"></span><br><span class="line">[options.packages.find]</span><br><span class="line">where = src</span><br></pre></td></tr></table></figure><h3 id="4-生成package"><a href="#4-生成package" class="headerlink" title="4. 生成package"></a>4. 生成package</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">py <span class="literal">-m</span> build</span><br></pre></td></tr></table></figure><h3 id="5-上传package"><a href="#5-上传package" class="headerlink" title="5. 上传package"></a>5. 上传package</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">twine upload dist/*</span><br></pre></td></tr></table></figure><p>参考链接：<a href="https://packaging.python.org/tutorials/packaging-projects/">https://packaging.python.org/tutorials/packaging-projects/</a></p><h2 id="Golang-Package"><a href="#Golang-Package" class="headerlink" title="Golang Package"></a>Golang Package</h2><p>以 GitHub 为例，发布一个 module 需要创建一个以 <code>github.com/username/mymodule</code> 为名称的mod文件。</p><p>运行命令以创建 <code>go.mod</code> 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go mod init github.com/username/mymodule</span><br></pre></td></tr></table></figure><p>然后就可以开始编写模块。</p><p>模块编写完成之后运行 <code>go mod tidy</code> 和 <code>go test ./...</code> 命令确保一切正常。</p><p>然后使用 <code>git tag</code> 命令新建版本号，并推送到远程仓库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;mymodule: changes for v0.1.0&quot;</span></span><br><span class="line">git tag v0.1.0</span><br><span class="line">git push origin v0.1.0</span><br></pre></td></tr></table></figure><p>运行 <code>go list</code> 命令更新模块索引，使模块可用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GOPROXY=proxy.golang.org go list -m github.com/username/mymodule@v0.1.0</span><br></pre></td></tr></table></figure><p>其他开发人员可以运行 <code>go get</code> 命令导入指定版本号的 module</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get github.com/username/mymodule@v0.1.0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 知道 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ffmpeg推流</title>
      <link href="/posts/ee0d4182/"/>
      <url>/posts/ee0d4182/</url>
      
        <content type="html"><![CDATA[<p>查看音频设备</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg <span class="literal">-list_devices</span> true <span class="operator">-f</span> dshow <span class="literal">-i</span> dummy</span><br></pre></td></tr></table></figure><p>本地视频推流</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -re -i D:\1.mp4 -vcodec libx264 -acodec aac -f flv rtmp://localhost:1935/live/home</span><br><span class="line">ffmpeg -re -i D:\1.mp4 -c copy -f flv rtmp://localhost:1935/live/home</span><br></pre></td></tr></table></figure><p>桌面推流</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -f gdigrab -i desktop -vcodec libx264 -f flv rtmp://localhost:1935/live/home</span><br><span class="line">ffmpeg -f dshow -i audio=&quot;麦克风阵列 (Realtek(R) Audio)&quot; -f gdigrab -i desktop -vcodec libx264 -f flv rtmp://localhost:1935/live/home</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -rtbufsize 1500M -f dshow -i audio=&quot;Microphone (Realtek High Definition Audio)&quot; -f -y -rtbufsize 100M -f gdigrab -t 00:00:30 -framerate 30 -probesize 10M -draw_mouse 1 -i desktop -c:v libx264 -r 30 -preset ultrafast -tune zerolatency -crf 25 -pix_fmt yuv420p &quot;d:\ffmpeg_testing.mp4&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 使用 FFmpeg 推流</span><br><span class="line">ffmpeg -f dshow -i video=&quot;BisonCam, NB Pro&quot;:audio=&quot;麦克风 (2-Realtek High Definition Audio)&quot; -vcodec libx264 -acodec copy -preset:v ultrafast -tune:v zerolatency -f flv &quot;rtmp://192.168.242.60:1935/live/home&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 备忘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ffmpeg </tag>
            
            <tag> 直播 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 基本操作</title>
      <link href="/posts/f328253f/"/>
      <url>/posts/f328253f/</url>
      
        <content type="html"><![CDATA[<h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3><p><a href="https://git-scm.com/download/linux">https://git-scm.com/download/linux</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">.gitignore</span><br><span class="line">ssh -i id_rsa2 -T git@e.coding.net</span><br><span class="line">git <span class="built_in">log</span> --oneline --decorate --graph --all</span><br><span class="line">git checkout -b iss53</span><br><span class="line">git <span class="built_in">clone</span> -c http.proxy=<span class="string">&quot;127.0.0.1:10809&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把私钥添加到sshagent里</span></span><br><span class="line">ssh-agent bash</span><br><span class="line">ssh-add ~/.ssh/id_ed25519</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line">ssh-add -D</span><br><span class="line">ssh-add -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在~/.ssh/文件夹下</span></span><br><span class="line"><span class="comment">#activehacker account</span></span><br><span class="line">Host github.com-activehacker</span><br><span class="line">HostName github.com</span><br><span class="line">User git</span><br><span class="line">IdentityFile ~/.ssh/id_rsa_activehacker</span><br><span class="line"></span><br><span class="line"><span class="comment">#jexchan account</span></span><br><span class="line">Host github.com-jexchan</span><br><span class="line">HostName github.com</span><br><span class="line">User git</span><br><span class="line">IdentityFile ~/.ssh/id_rsa_jexchan</span><br></pre></td></tr></table></figure><p><a href="https://gist.github.com/jexchan/2351996">https://gist.github.com/jexchan/2351996</a></p><h3 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h3><p><strong>开发环境</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update &amp;&amp; sudo apt upgrade -y</span><br><span class="line">sudo apt install build-essential</span><br><span class="line"></span><br><span class="line">sudo apt remove build-essential</span><br><span class="line">sudo apt autoremove</span><br></pre></td></tr></table></figure><p><strong>执行sudo命令时自动输入密码</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;password&quot;</span> | sudo -S apt update</span><br></pre></td></tr></table></figure><p><strong>归档文件和提取归档文件</strong></p><p>1、使用tar归档</p><ul><li>-c表示创建新的归档文件</li><li>-f表示归档文件名，该选项后面必须跟一个文件名称，文件名必须紧跟在-f之后出现，而且-f应该是选项中的最后一个</li><li>-t可以列出归档文件中所包含的文件</li><li>-v或-vv参数可以在命令输出中加入更多的细节信息</li><li>-r可以将新文件追加到已有的归档文件末尾</li><li>-t可以列出归档文件中的内容</li><li>-x可以将归档文件的内容提取到当前目录</li><li>-C将归档文件的内容提取到指定目录中</li><li>-A合并多个tar文件</li><li>-j指定压缩成bunzip2格式；</li><li>-z指定压缩成gzip格式；</li><li>–lzma指定压缩成lzma格式</li><li>-a或–auto-compress选项根据扩展名自动选择压缩算法</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tar -cf archive.tar file1 file2 file3 folder1 .. <span class="comment"># 创建新的归档文件</span></span><br><span class="line">tar -rvf original.tar new_file <span class="comment"># 将新文件追加到已有的归档文件末尾</span></span><br><span class="line">tar -xf archive.tar -C /path/to/extraction_directory <span class="comment"># 将归档文件的内容提取到指定目录中</span></span><br><span class="line">tar -xvf file.tar file1 file4 <span class="comment"># 只提取file1和file4，忽略其他文件</span></span><br><span class="line">tar -xf archive.tar -C /path/to/extraction_directory</span><br><span class="line">tar -Af file1.tar file2.tar <span class="comment"># 合并多个tar文件</span></span><br><span class="line">tar -f archive.tar --delete file1 file2 .. <span class="comment"># 从归档中删除文件</span></span><br><span class="line">tar -acvf archive.tar.gz filea fileb filec <span class="comment"># 根据扩展名自动选择压缩算法</span></span><br></pre></td></tr></table></figure><p><strong>使用ssh在远程主机上执行命令</strong></p><p>1、执行一条命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh mec@192.168.0.1 <span class="string">&#x27;whoami&#x27;</span></span><br></pre></td></tr></table></figure><p>2、执行多条命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh mec@192.168.0.1 <span class="string">&quot;echo user: <span class="subst">$(whoami)</span>;echo OS: <span class="subst">$(uname)</span>&quot;</span></span><br></pre></td></tr></table></figure><p><strong>配置ssh无密码自动登录</strong></p><p>1、在本地主机上创建SSH密钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> -al ~/.ssh <span class="comment"># 如果已经存在id_rsa文件就不必再次生成</span></span><br><span class="line">ssh-keygen -t rsa -b 4096</span><br></pre></td></tr></table></figure><p>2、将生成的公钥传给远程主机并将其加入到文件<code>~/.ssh/authorized_keys</code>中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh USER@REMOTE_HOST <span class="string">&quot;cat &gt;&gt; ~/.ssh/authorized_keys&quot;</span> &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p><strong>主机之间传输文件</strong></p><p>1、使用sftp传输文件</p><p>sftp -oPort&#x3D;422 <a href="mailto:&#x75;&#x73;&#x65;&#x72;&#x40;&#x73;&#x6c;&#121;&#110;&#117;&#x78;&#x2e;&#111;&#114;&#x67;">&#x75;&#x73;&#x65;&#x72;&#x40;&#x73;&#x6c;&#121;&#110;&#117;&#x78;&#x2e;&#111;&#114;&#x67;</a></p><p>2、使用scp传输文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp filename user@remotehost:/home/path <span class="comment"># 将文件复制到远程主机中</span></span><br><span class="line">scp user@remotehost:/home/path/filename filename <span class="comment"># 将远程主机中的文件复制到当前目录并使用给定的文件名</span></span><br></pre></td></tr></table></figure><p>如果SSH没有运行在端口22，使用和sftp相同的语法，利用选项-oPort指定其他端口。</p><p>3、使用rsync传输文件</p><p>rsync可以同步不同位置上的文件和目录。</p><ul><li>-a表示进行归档操作</li><li>-v（verbose）表示在stdout上打印出细节信息或进度</li><li>-z指定在传输时压缩数据</li><li>-r强制rsync以递归方式复制目录中所有的内容</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rsync -av /home/slynux/data slynux@192.168.0.6:/home/backups/data</span><br><span class="line">rsync -av source_dir username@host:PATH</span><br><span class="line">rsync -av username@host:PATH destination</span><br><span class="line">rsync -av /home/test/ /home/backups <span class="comment"># 将一个目录中的内容同步到另一个目录</span></span><br><span class="line">rsync -av /home/test /home/backups <span class="comment"># 将包括目录本身在内的内容复制到另一个目录中</span></span><br></pre></td></tr></table></figure><p>4、使用 netcat 传输文件</p><p>接收端等待接收文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -l -p 8080 &gt; bak.tgz</span><br></pre></td></tr></table></figure><p>发送端发送文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc 192.168.1.1 8080 &lt; bak.tgz</span><br></pre></td></tr></table></figure><p><strong>使用 SSH 实现端口转发</strong></p><p>端口转发可以将来自某台主机的IP连接重定向到另一台主机。</p><p>1、将本地主机端口8000上的流量转发到<a href="http://www.kernel.org的端口80上：">www.kernel.org的端口80上：</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -L 8000:www.kernel.org:80 username@localhost</span><br></pre></td></tr></table></figure><p>2、将远程主机端口8000上的流量转发到<a href="http://www.kernel.org的端口80上：">www.kernel.org的端口80上：</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -L 8000:www.kernel.org:80 username@REMOTE_MACHINE</span><br></pre></td></tr></table></figure><p>按照上面的方法，一旦端口转发设置完毕，你会得到一个shell提示符。在进行端口转发的过程中，这个shell必须保持打开状态，什么时候想停止转发，只需要退出该shell就可以了。</p><p>3、非交互式端口转发</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -fL 8000:www.kernel.org:80 username@localhost -N</span><br></pre></td></tr></table></figure><p>-f指定ssh在执行命令前转入后台运行，-N告诉ssh无需执行命令，只进行端口转发。</p><p>4、反向端口转发</p><p>将远程主机端口8000上的流量转发到本地主机的端口80上：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -R 8000:localhost:80 username@REMOTE_MACHINE</span><br></pre></td></tr></table></figure><p><strong>使用 cron 进行任务调度</strong></p><p>cron表项指定了执行时间以及要执行的命令。cron表中的每一行都定义了单条命令。命令<br>可以是脚本或二进制可执行文件。</p><p>cron表中的每一行（表项）均由6个字段组成，字段之间以空格分隔，字段中的多个值以逗号分隔，字段按照以下顺序排列：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">分钟（0～59） 小时（0～23） 天（1～31） 月份（1～12） 星期中的某天（0～6） 命令（在指定时间执行的脚本或命令）</span><br></pre></td></tr></table></figure><p>星号表示任何时间段。除号表示调度的时间间隔（在分钟字段上出现的*&#x2F;5表示每隔5分钟）。</p><p><code>crontab -e</code> 可用于编辑cron表：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">02 * * * * /home/slynux/test.sh <span class="comment"># 在每天中每小时的第2分钟执行脚本test.sh</span></span><br><span class="line">00 5,6,7 * * * /home/slynux/test.sh <span class="comment"># 在每天的第5、6、7小时执行脚本test.sh</span></span><br><span class="line">00 */2 * * 0 /home/slynux/script.sh <span class="comment"># 在周日的时候，每隔2个小时执行脚本script.sh</span></span><br><span class="line">00 02 * * * /sbin/shutdown -h <span class="comment"># 在每天凌晨2点关闭计算机</span></span><br></pre></td></tr></table></figure><ul><li>-l可以列出当前用户的cron表</li><li>-r可以删除当前用户的cron表</li></ul><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">ssh -oPort=6000 root@192.168.1.1</span><br><span class="line">ssh -p 10385  root@xxx.xxx.com</span><br><span class="line">ssh user@locahost -p 422</span><br><span class="line"><span class="comment"># 查看4222端口是否打开</span></span><br><span class="line">lsof -i:4222</span><br><span class="line">netstat -nupl (UDP类型的端口)</span><br><span class="line">netstat -ntpl (TCP类型的端口)</span><br><span class="line">netstat -nupl | grep 3306</span><br><span class="line">netstat -ntpl | grep 15740</span><br><span class="line"><span class="comment"># 这个表示查找处于监听状态的，端口号为3306的进程</span></span><br><span class="line"></span><br><span class="line">find / -name cci-agent</span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">chmod</span> +x /etc/rc.d/rc.local</span><br><span class="line">vim /etc/rc.d/rc.local</span><br><span class="line"></span><br><span class="line">chkconfig --add start_sunny.sh</span><br><span class="line"></span><br><span class="line"><span class="built_in">nohup</span> ./frps -c frps.ini &gt;/dev/null 2&gt;&amp;1 &amp;</span><br><span class="line"><span class="built_in">nohup</span> ./frpc -c frpc.ini &gt;/dev/null 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line">vim /etc/rc.d/rc.local</span><br><span class="line"></span><br><span class="line"><span class="built_in">nohup</span> /root/logserver/hskchuantou/xxfrp/frp_0.35.1_linux_amd64/frpc -c frpc.ini &gt;/dev/null 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line">poweroff</span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计代码行数</span></span><br><span class="line">find . | grep <span class="string">&#x27;\.c$\|\.h$&#x27;</span> | xargs <span class="built_in">wc</span> -l</span><br><span class="line"><span class="comment"># 统计磁盘使用情况</span></span><br><span class="line"><span class="built_in">du</span> -sc /usr/share/* | <span class="built_in">sort</span> -nr</span><br><span class="line"><span class="built_in">du</span> -sc /usr/share/* | <span class="built_in">sort</span> -nr | more</span><br><span class="line"><span class="comment"># 将反汇编的结果保存到output文件中</span></span><br><span class="line">objdump -d myprog &gt; output</span><br><span class="line"><span class="comment"># 输出到文件的同时也输出到屏幕上</span></span><br><span class="line">objdump -d myprog | <span class="built_in">tee</span> output</span><br><span class="line"><span class="comment"># time工具记录了这一过程所消耗的时间</span></span><br><span class="line">time ./myprog &lt; data | <span class="built_in">tee</span> output</span><br><span class="line"><span class="comment"># /dev/null是一个特殊的文件, 任何试图输出到它的信息都会被丢弃</span></span><br><span class="line">time ./myprog &lt; data &gt; /dev/null</span><br></pre></td></tr></table></figure><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># From source code</span></span><br><span class="line">wget https://download.redis.io/releases/redis-6.2.5.tar.gz</span><br><span class="line">tar xzf redis-6.2.5.tar.gz</span><br><span class="line"><span class="built_in">cd</span> redis-6.2.5</span><br><span class="line">make</span><br><span class="line"></span><br><span class="line"><span class="comment"># From the official Ubuntu PPA</span></span><br><span class="line">sudo add-apt-repository ppa:redislabs/redis</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install redis</span><br><span class="line"></span><br><span class="line"><span class="comment"># Run Redis</span></span><br><span class="line">src/redis-server</span><br><span class="line">src/redis-cli</span><br></pre></td></tr></table></figure><h3 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h3><p><strong>国内镜像</strong></p><p><a href="https://mirrors.ustc.edu.cn/repogen/">https://mirrors.ustc.edu.cn/repogen/</a></p><p><a href="http://mirrors.ustc.edu.cn/">http://mirrors.ustc.edu.cn/</a></p><p><a href="https://mirrors.163.com/">https://mirrors.163.com/</a></p><p><strong>docker国内镜像</strong></p><p>vim &#x2F;etc&#x2F;docker&#x2F;daemon.json </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [</span><br><span class="line">    &quot;https://docker.mirrors.ustc.edu.cn&quot;,</span><br><span class="line">    &quot;http://hub-mirror.c.163.com&quot;,</span><br><span class="line">    &quot;https://registry.docker-cn.com&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>删除镜像</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker rmi -f $(docker images | grep <span class="string">&quot;userpool&quot;</span> | awk <span class="string">&#x27;&#123;print $3&#125;&#x27;</span>)</span><br><span class="line">docker rmi -f $(docker images | grep <span class="string">&quot;/test/golang-gin-app&quot;</span> | awk <span class="string">&#x27;&#123;print $3&#125;&#x27;</span>)</span><br><span class="line">docker rmi -f $(docker images | grep <span class="string">&quot;none&quot;</span> | awk <span class="string">&#x27;&#123;print $3&#125;&#x27;</span>)</span><br><span class="line">docker stop $(docker ps -a | grep <span class="string">&quot;Exited&quot;</span> | awk <span class="string">&#x27;&#123;print $1 &#125;&#x27;</span>)</span><br><span class="line">docker stop $(docker ps -a | grep <span class="string">&quot;Up&quot;</span> | awk <span class="string">&#x27;&#123;print $1 &#125;&#x27;</span>)</span><br><span class="line">docker <span class="built_in">rm</span> -f $(docker ps -a | grep <span class="string">&quot;Exited&quot;</span> | awk <span class="string">&#x27;&#123;print $1 &#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> -it container_name bash</span><br></pre></td></tr></table></figure><h3 id="sql"><a href="#sql" class="headerlink" title="sql"></a>sql</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">su - postgres</span><br><span class="line">--- 所有数据库</span><br><span class="line">SELECT * FROM pg_database;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 备份</span></span><br><span class="line">pg_dumpall &gt; pg_backup.bak</span><br><span class="line">psql -f pg_backup.bak postgres</span><br><span class="line">pg_dumpall -U postgres &gt; databackup.bak</span><br><span class="line"></span><br><span class="line"><span class="comment"># 还原</span></span><br><span class="line">psql basicinfo2 &lt; basicinfo_20210223_171724</span><br><span class="line"></span><br><span class="line">tar -zcvf test4.tar.gz test4/    //将test4文件夹做为归档文件</span><br><span class="line">tar -zxvf test4.tar.gz  //归档文件解压缩</span><br></pre></td></tr></table></figure><h3 id="k8s"><a href="#k8s" class="headerlink" title="k8s"></a>k8s</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line">kubectl get namespace</span><br><span class="line">kubectl get ns</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取一个 shell 进入 Pod 中运行的容器：</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -it secret-test-pod -- /bin/bash</span><br><span class="line">kubectl <span class="built_in">exec</span> -i -t env-single-secret -- /bin/sh -c <span class="string">&#x27;echo $SECRET_USERNAME&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">curl -LO https://dl.k8s.io/release/v1.20.0/bin/linux/amd64/kubectl</span><br><span class="line">install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64</span><br><span class="line">install minikube-linux-amd64 /usr/local/bin/minikube</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">kubectl <span class="built_in">exec</span> test-deployment-8697bdd6c4-sdhmm  -it bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 位于名字空间中的资源</span></span><br><span class="line">kubectl api-resources --namespaced=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不在名字空间中的资源</span></span><br><span class="line">kubectl api-resources --namespaced=<span class="literal">false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 Pod：</span></span><br><span class="line">kubectl apply -f memory-request-limit-3.yaml --namespace=mem-example</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 Pod 状态：</span></span><br><span class="line">kubectl get pod memory-demo-3 --namespace=mem-example</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 Pod 日志：</span></span><br><span class="line">kubectl logs &lt;podname&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看前一个 Pod 日志：</span></span><br><span class="line">kubectl logs &lt;podname&gt; --previous</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除 Pod：</span></span><br><span class="line">kubectl delete pod memory-demo-3 --namespace=mem-example</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除命名空间。下面的命令会删除你根据这个任务创建的所有 Pod：</span></span><br><span class="line">kubectl delete namespace mem-example</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示有关 Deployment 的信息：</span></span><br><span class="line">kubectl get deployments hello-world</span><br><span class="line">kubectl describe deployments hello-world</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示有关 ReplicaSet 对象的信息：</span></span><br><span class="line">kubectl get replicasets</span><br><span class="line">kubectl describe replicasets</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建公开 Deployment 的 Service 对象：</span></span><br><span class="line">kubectl expose deployment hello-world --<span class="built_in">type</span>=LoadBalancer --name=my-service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示有关 Service 的信息：</span></span><br><span class="line">kubectl get services my-service</span><br><span class="line">kubectl describe services my-service</span><br><span class="line"></span><br><span class="line"><span class="comment"># pod的内部地址</span></span><br><span class="line">kubectl get pods --output=wide</span><br><span class="line">kubectl get pods -l run=my-nginx -o yaml | grep podIP</span><br><span class="line">kubectl get pods --selector=<span class="string">&quot;run=load-balancer-example&quot;</span> --output=wide</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动打开 Hello World 应用程序</span></span><br><span class="line">minikube service my-service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除服务</span></span><br><span class="line">kubectl delete services my-service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除正在运行 Hello World 应用程序的 Deployment，ReplicaSet 和 Pod</span></span><br><span class="line">kubectl delete deployment hello-world</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 Service</span></span><br><span class="line">kubectl expose deployment/my-nginx</span><br><span class="line">service/my-nginx exposed</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看你的 Service 资源:</span></span><br><span class="line">kubectl get svc my-nginx</span><br><span class="line">kubectl describe svc my-nginx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># kustomization.yaml</span></span><br><span class="line">kubectl apply -k ./</span><br><span class="line">kubectl get -k .</span><br><span class="line">kubectl delete -k ./</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 secret</span></span><br><span class="line">kubectl create secret docker-registry regcred1 --docker-server=docker.pkg.coding.net --docker-username=1112@qq.com --docker-password=123 --docker-email=<span class="built_in">test</span>@qq.com -n <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">kubectl create secret generic harborsecret --from-file=.dockerconfigjson=/root/.docker/config.json --<span class="built_in">type</span>=kubernetes.io/dockerconfigjson</span><br><span class="line"></span><br><span class="line">kubectl create secret generic harborsecret \</span><br><span class="line">    --from-file=/root/.docker/config.json \</span><br><span class="line">    --<span class="built_in">type</span>=kubernetes.io/dockerconfigjson</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">minikube delete</span><br><span class="line">kubectl delete node --all</span><br><span class="line"><span class="built_in">rm</span> -rf /usr/local/bin/kubectl</span><br><span class="line"><span class="built_in">rm</span> -rf ~/.kube</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">port</span><br><span class="line">port是k8s集群内部访问service的端口，即通过clusterIP: port可以访问到某个service</span><br><span class="line"></span><br><span class="line">nodePort</span><br><span class="line">nodePort是外部访问k8s集群中service的端口，通过nodeIP: nodePort可以从外部访问到某个service。</span><br><span class="line"></span><br><span class="line">targetPort</span><br><span class="line">targetPort是pod的端口，从port和nodePort来的流量经过kube-proxy流入到后端pod的targetPort上，最后进入容器。</span><br><span class="line"></span><br><span class="line">containerPort</span><br><span class="line">containerPort是pod内部容器的端口，targetPort映射到containerPort。</span><br></pre></td></tr></table></figure><h3 id="helm"><a href="#helm" class="headerlink" title="helm"></a>helm</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3</span><br><span class="line"><span class="built_in">chmod</span> 700 get_helm.sh</span><br><span class="line">./get_helm.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 minio</span></span><br><span class="line">helm repo remove stable</span><br><span class="line">helm repo add stable http://mirror.azure.cn/kubernetes/charts/</span><br><span class="line">helm repo update</span><br><span class="line">helm install stable/minio --generate-name</span><br></pre></td></tr></table></figure><h3 id="k3s"><a href="#k3s" class="headerlink" title="k3s"></a>k3s</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 安装k3s</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载 k3s 二进制文件，k3s-airgap-images-$ARCH.tar(k3s-airgap-images-amd64.tar) tar文件</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /var/lib/rancher/k3s/agent/images/</span><br><span class="line"><span class="built_in">cp</span> ./k3s-airgap-images-<span class="variable">$ARCH</span>.tar /var/lib/rancher/k3s/agent/images/</span><br><span class="line"><span class="built_in">cp</span> ./k3s /usr/local/bin/k3s</span><br><span class="line"></span><br><span class="line">wget https://get.k3s.io</span><br><span class="line"></span><br><span class="line">INSTALL_K3S_SKIP_DOWNLOAD=<span class="literal">true</span> ./install-k3s.sh</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">systemctl restart k3s</span><br><span class="line">systemctl restart k3s-agent</span><br><span class="line">service k3s restart</span><br><span class="line">service k3s-agent restart</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="k8s-service"><a href="#k8s-service" class="headerlink" title="k8s service"></a>k8s service</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kube-node-service</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">kube-node-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span>      <span class="comment">#这里代表是NodePort类型的</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">8080</span>        <span class="comment">#这里的端口和clusterIP对应，即ip:8080,供内部访问。</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">8080</span>  <span class="comment">#端口一定要和container暴露出来的端口对应</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">nodePort:</span> <span class="number">32143</span>   <span class="comment"># 所有的节点都会开放此端口，此端口供外部调用。</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">web</span>          <span class="comment">#这里选择器一定要选择容器的标签，之前写name:kube-node是错的。</span></span><br></pre></td></tr></table></figure><h3 id="rancher"><a href="#rancher" class="headerlink" title="rancher"></a>rancher</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -sfL http://rancher-mirror.cnrancher.com/k3s/k3s-install.sh | INSTALL_K3S_MIRROR=cn sh -</span><br><span class="line"></span><br><span class="line">k3s server  --flannel-iface enp0s3  --kube-apiserver-arg service-node-port-range=1-65535</span><br><span class="line"></span><br><span class="line">k3s agent --flannel-iface enp0s3  --server https://centos1:6443 --token K109783da72467af34e663138dd8dd99f9cc7507c08c87eea726dfe8ad934359b94::server:afa081a89a86fa3008e0754f265f1911</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name rancher3 -p 8880:80 -p 8443:443 --privileged -v /var/lib/rancher/:/var/lib/rancher/ rancher/rancher</span><br><span class="line"></span><br><span class="line">docker run --privileged -d --<span class="built_in">rm</span> -p 443:443 -v /var/lib/rancher/:/var/lib/rancher/ --name rancher rancher/rancher:stable</span><br><span class="line"></span><br><span class="line">docker run --privileged -d --restart=unless-stopped -p 80:80 -p 443:443 -v /var/lib/rancher/:/var/lib/rancher/ --name rancher rancher/rancher:stable</span><br><span class="line"></span><br><span class="line">sudo docker run --privileged -d --restart=unless-stopped -p 80:80 -p 443:443 -v /var/lib/rancher/:/var/lib/rancher/ rancher/rancher:stable</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 代理</span></span><br><span class="line">--proxy http://127.0.0.1:10809</span><br><span class="line"><span class="comment"># 镜像</span></span><br><span class="line">--registry=https://registry.npmmirror.com</span><br><span class="line"><span class="comment"># 升级npm</span></span><br><span class="line">npm install -g npm --registry=https://registry.npmmirror.com</span><br><span class="line"><span class="comment"># 清缓存</span></span><br><span class="line">npm cache verify</span><br><span class="line">npm cache clean --force</span><br><span class="line">npm uninstall *</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 无法加载文件 ******.ps1，因为在此系统中禁止执行脚本。有关详细信息，请参阅 &quot;get-help about_signing&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用管理员身份运行 PowerShell</span></span><br><span class="line"><span class="built_in">set-executionpolicy</span> remotesigned</span><br><span class="line">Y</span><br></pre></td></tr></table></figure><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 杀死进程</span></span><br><span class="line">taskkill /F /im Xshell.exe</span><br><span class="line"><span class="comment"># 树形文件列表</span></span><br><span class="line">tree /F</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">wget -c https://go.dev/dl/go1.17.6.linux-amd64.tar.gz</span><br><span class="line"><span class="built_in">rm</span> -rf /usr/local/go &amp;&amp; tar -C /usr/local -xzf go1.17.6.linux-amd64.tar.gz</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/local/go/bin</span><br><span class="line">go version</span><br><span class="line"></span><br><span class="line"><span class="comment"># linux</span></span><br><span class="line">SET CGO_ENABLED=0</span><br><span class="line">SET GOOS=linux</span><br><span class="line">SET GOARCH=amd64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 代理</span></span><br><span class="line">go <span class="built_in">env</span> -w GO111MODULE=on</span><br><span class="line">go <span class="built_in">env</span> -w GOPROXY=https://goproxy.cn,direct</span><br></pre></td></tr></table></figure><h3 id="Edge"><a href="#Edge" class="headerlink" title="Edge"></a>Edge</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">### 查看同步设置</span><br><span class="line">edge://sync-internals/</span><br></pre></td></tr></table></figure><h3 id="PostgreSQL"><a href="#PostgreSQL" class="headerlink" title="PostgreSQL"></a>PostgreSQL</h3><p>在 PostgreSQL 中给一般用户使用的字符类型有三种</p><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>character varying(n), varchar(n)</td><td>有限制的变长</td></tr><tr><td>character(n), char(n)</td><td>定长，空格填充</td></tr><tr><td>text</td><td>无限变长</td></tr></tbody></table><p><code>varchar(n)</code> 和 <code>char(n)</code> 分别是 <code>character varying(n)</code> 和 <code>character(n)</code> 的别名。</p><p>有长度声明词的 <code>character varying(n)</code> 或者 <code>character(n)</code> 那么超长的值将被截断成n个字符，而不会抛出错误（这也是SQL标准的要求）。</p><p>没有长度声明词的 <code>character</code> 等效于 <code>character(1)</code> 。</p><p>没有长度声明词的 <code>character varying</code> ，那么该类型接受任何长度的串。</p><p>这些类型的存储需求是 4 字节加上实际的字串，如果是 <code>character</code> 的话再加上填充的字节。</p><p>不管怎样，允许存储的最长字串大概是 1 GB。</p><p>如果你想要存储没有指定上限的长串，使用 <code>text</code> 或没有长度声明的 <code>character varying</code> ，而不是给出一个任意长度限制）。</p><p>这三种类型之间没有性能差别，只不过是在使用填充空白的类型的时候需要更多存储尺寸，以及在存储到一个有长度约束的列时需要少量额外CPU周期来检查长度。虽然在某些其它的数据库系统里，<code>character(n)</code> 有一定的性能优势，但在 PostgreSQL 里没有。事实上，<code>character(n)</code> 通常是这三种类型之中最慢的一个，因为它需要额外的存储开销。在大多数情况下，应该使用 <code>text</code> 或者 <code>character varying</code> 。</p>]]></content>
      
      
      <categories>
          
          <category> 备忘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> sql </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剪贴板📋</title>
      <link href="/posts/b3869c18/"/>
      <url>/posts/b3869c18/</url>
      
        <content type="html"><![CDATA[<h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t ed25519 -C &quot;johndoe@example.com&quot;</span><br><span class="line">ssh -i ~/.ssh/id_ed25519 -T git@github.com</span><br><span class="line">git config --global user.name &quot;John Doe&quot;</span><br><span class="line">git config --global user.email johndoe@example.com</span><br><span class="line">git config core.sshCommand &#x27;ssh -i ~/.ssh/id_ed25519_work -o IdentitiesOnly=yes&#x27;</span><br><span class="line">git config --global http.proxy http://127.0.0.1:7890</span><br><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br><span class="line">git -c http.proxy=socks5h://127.0.0.1:7890 clone &lt;git-url&gt;</span><br></pre></td></tr></table></figure><h3 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">    HostName ssh.github.com</span><br><span class="line">    User git</span><br><span class="line">    Port 443</span><br><span class="line">    ProxyCommand &#x27;C:\Program Files\Git\mingw64\bin\connect.exe&#x27; -S 127.0.0.1:7890 %h %p # Windows</span><br><span class="line">    ProxyCommand nc -v -x 127.0.0.1:7890 %h %p # macOS</span><br></pre></td></tr></table></figure><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">截取音频</span></span><br><span class="line">ffmpeg -i input.mp3 -ss 00:00:10 -t 00:00:20 output.mp3</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p><strong>go</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go env -w GO111MODULE=on</span><br><span class="line">go env -w GOPROXY=https://goproxy.cn,direct</span><br></pre></td></tr></table></figure><p><strong>brew</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">export https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 all_proxy=socks5://127.0.0.1:7890</span><br><span class="line">/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;</span><br><span class="line">(echo; echo &#x27;eval &quot;$(/opt/homebrew/bin/brew shellenv)&quot;&#x27;) &gt;&gt; ~/.zprofile</span><br><span class="line">eval &quot;$(/opt/homebrew/bin/brew shellenv)&quot;</span><br><span class="line">echo &#x27;# Set PATH, MANPATH, etc., for Homebrew.&#x27; &gt;&gt; ~/.zprofile</span><br><span class="line">echo &#x27;export HOMEBREW_BREW_GIT_REMOTE=&quot;https://mirrors.ustc.edu.cn/brew.git&quot;&#x27; &gt;&gt; ~/.zprofile</span><br><span class="line">echo &#x27;export HOMEBREW_CORE_GIT_REMOTE=&quot;https://mirrors.ustc.edu.cn/homebrew-core.git&quot;&#x27; &gt;&gt; ~/.zprofile</span><br><span class="line">export HOMEBREW_BREW_GIT_REMOTE=&quot;https://mirrors.ustc.edu.cn/brew.git&quot;</span><br><span class="line">export HOMEBREW_CORE_GIT_REMOTE=&quot;https://mirrors.ustc.edu.cn/homebrew-core.git&quot;</span><br></pre></td></tr></table></figure><p><strong>mac mysql, redis</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">brew install mysql</span><br><span class="line">brew services start mysql</span><br><span class="line">mysql_secure_installation</span><br><span class="line">mysql -u root -p</span><br><span class="line"></span><br><span class="line">brew install redis</span><br><span class="line">brew services start redis</span><br><span class="line">brew services stop redis</span><br></pre></td></tr></table></figure><p><strong>npm</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">npm config set strict-ssl false</span><br><span class="line">npm install --proxy http://127.0.0.1:1080</span><br><span class="line">npm install --registry https://registry.npm.taobao.org</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">全局设置npm的http,https代理</span></span><br><span class="line">npm config set proxy http://proxy_host:port</span><br><span class="line">npm config set proxy http://username:password@proxy.us.company:port</span><br><span class="line">npm config set https-proxy https://proxy.company.com:8080</span><br><span class="line">npm config set https-proxy http://username:password@proxy.us.company:port</span><br></pre></td></tr></table></figure><p><strong>python</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pip -U</span><br><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple some-package</span><br><span class="line">pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><p><strong>rust</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">export RUSTUP_DIST_SERVER=https://mirrors.ustc.edu.cn/rust-static</span><br><span class="line">export RUSTUP_UPDATE_ROOT=https://mirrors.ustc.edu.cn/rust-static/rustup</span><br><span class="line">curl https://sh.rustup.rs -sSf | sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">vim ~/.cargo/config</span></span><br><span class="line">[source.crates-io]</span><br><span class="line">replace-with = &#x27;ustc&#x27;</span><br><span class="line"></span><br><span class="line">[source.ustc]</span><br><span class="line">registry = &quot;git://mirrors.ustc.edu.cn/crates.io-index&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">end</span></span><br><span class="line"></span><br><span class="line">source $HOME/.cargo/env</span><br></pre></td></tr></table></figure><p><strong>docker</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">vim /etc/docker/daemon.json</span></span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [</span><br><span class="line">    &quot;https://docker.mirrors.ustc.edu.cn&quot;,</span><br><span class="line">    &quot;http://hub-mirror.c.163.com&quot;,</span><br><span class="line">    &quot;https://registry.docker-cn.com&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">end</span></span><br><span class="line"></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><p><strong>Ubuntu</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update &amp;&amp; sudo apt upgrade -y</span><br><span class="line">sudo apt install build-essential</span><br><span class="line"></span><br><span class="line">sudo apt remove build-essential</span><br><span class="line">sudo apt autoremove</span><br></pre></td></tr></table></figure><h3 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h3><p><strong>trackers</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://cdn.jsdelivr.net/gh/ngosang/trackerslist/trackers_best.txt</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 备忘 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Git 使用总结</title>
      <link href="/posts/e90cddc/"/>
      <url>/posts/e90cddc/</url>
      
        <content type="html"><![CDATA[<h3 id="Git-配置"><a href="#Git-配置" class="headerlink" title="Git 配置"></a>Git 配置</h3><p>查看 Git 的配置所在文件：<code>git config --list --show-origin</code>.</p><p>Git 的配置信息存储在四个地方：</p><ul><li>系统级：<code>&lt;Git 安装路径&gt;/etc/gitconfig</code></li><li>用户级：<code>~/.gitconfig</code></li><li>仓库级：仓库根目录下的 <code>.git/config</code></li><li>工作树级：仓库根目录下的 <code>.git/config.worktree</code></li></ul><p>配置优先级：工作树级 &gt; 仓库级 &gt; 用户级 &gt; 系统级。</p><p>使用 <code>git config</code> 命令读取和写入配置的时候加上 <code>--system</code>, <code>--global</code>, <code>--local</code>, <code>--worktree</code> 选项可实现不同级别的配置。</p><h3 id="Git-常用命令"><a href="#Git-常用命令" class="headerlink" title="Git 常用命令"></a>Git 常用命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t ed25519 -C <span class="string">&quot;your_email@example.com&quot;</span></span><br><span class="line">ssh -i ~/.ssh/id_ed25519 -T git@github.com</span><br><span class="line"></span><br><span class="line">git config --global user.name <span class="string">&quot;John Doe&quot;</span></span><br><span class="line">git config --global user.email johndoe@example.com</span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> -c core.sshCommand=<span class="string">&quot;ssh -i ~\\.ssh\\id_ed25519&quot;</span> git@github.com:xxx/xxx.git</span><br><span class="line">git config user.name <span class="string">&quot;John Doe work&quot;</span></span><br><span class="line">git config user.email johndoe_work@example.com</span><br><span class="line">git config core.sshCommand <span class="string">&#x27;ssh -i ~/.ssh/id_ed25519 -o IdentitiesOnly=yes&#x27;</span></span><br><span class="line"></span><br><span class="line">git config --list</span><br><span class="line">git config --system --list</span><br><span class="line">git config --global --list</span><br></pre></td></tr></table></figure><h3 id="Github-配置"><a href="#Github-配置" class="headerlink" title="Github 配置"></a>Github 配置</h3>]]></content>
      
      
      <categories>
          
          <category> 知道 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发环境问题</title>
      <link href="/posts/f809efe8/"/>
      <url>/posts/f809efe8/</url>
      
        <content type="html"><![CDATA[<p>持续更新…</p><p><strong>Ubuntu环境</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">https://mirrors.ustc.edu.cn/help/ubuntu.html</span><br><span class="line">https://mirrors.ustc.edu.cn/repogen/</span><br><span class="line">cp /etc/apt/sources.list /etc/apt/sources.list.bak</span><br><span class="line">sed -i &#x27;s/archive.ubuntu.com/mirrors.ustc.edu.cn/g&#x27; /etc/apt/sources.list</span><br><span class="line">apt-get update</span><br></pre></td></tr></table></figure><p><strong>Docker环境</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://get.daocloud.io/#install-docker</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove docker docker-engine</span><br><span class="line">rm -fr /var/lib/docker/</span><br><span class="line">curl -sSL https://get.daocloud.io/docker | sh</span><br><span class="line">curl -L https://get.daocloud.io/docker/compose/releases/download/v2.7.0/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose</span><br><span class="line">chmod +x /usr/local/bin/docker-compose</span><br><span class="line">vim /etc/docker/daemon.json</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;http://hub-mirror.c.163.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;https://registry.docker-cn.com&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>Go环境</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">wget</span> https://dl.google.com/go/go1.xx.x.linux<span class="literal">-amd64</span>.tar.gz</span><br><span class="line"><span class="built_in">rm</span> <span class="literal">-rf</span> /usr/local/go &amp;&amp; tar <span class="literal">-C</span> /usr/local <span class="literal">-xzf</span> go1.xx.x.linux<span class="literal">-amd64</span>.tar.gz</span><br><span class="line">export PATH=<span class="variable">$PATH:</span>/usr/local/go/bin</span><br><span class="line">export PATH=<span class="variable">$PATH:</span>/home/lx/go/bin</span><br><span class="line"></span><br><span class="line">mkdir D:\Cache\go\gobuildcache</span><br><span class="line">mkdir D:\Cache\go\gomodcache\pkg\mod</span><br><span class="line">go env <span class="literal">-w</span> GO111MODULE=on</span><br><span class="line">go env <span class="literal">-w</span> GOPROXY=https://goproxy.cn,direct</span><br><span class="line">go env <span class="literal">-w</span> GOCACHE=D:\Cache\go\gobuildcache</span><br><span class="line">go env <span class="literal">-w</span> GOMODCACHE=D:\Cache\go\gomodcache\pkg\mod</span><br><span class="line">go install github.com/grpc<span class="literal">-ecosystem</span>/grpc<span class="literal">-gateway</span>/v2/protoc<span class="literal">-gen-grpc-gateway</span>@latest</span><br><span class="line">go install github.com/grpc<span class="literal">-ecosystem</span>/grpc<span class="literal">-gateway</span>/v2/protoc<span class="literal">-gen-openapiv2</span>@latest</span><br><span class="line">go install google.golang.org/protobuf/cmd/protoc<span class="literal">-gen-go</span>@latest</span><br><span class="line">go install google.golang.org/grpc/cmd/protoc<span class="literal">-gen-go-grpc</span>@latest</span><br><span class="line">go install github.com/envoyproxy/protoc<span class="literal">-gen-validate</span>@latest</span><br><span class="line">go install github.com/bufbuild/buf/cmd/buf@latest</span><br><span class="line">go install github.com/kyleconroy/sqlc/cmd/sqlc@latest</span><br><span class="line">go install github.com/google/wire/cmd/wire@latest</span><br><span class="line">go install <span class="literal">-tags</span> <span class="string">&#x27;postgres&#x27;</span> github.com/golang<span class="literal">-migrate</span>/migrate/v4/cmd/migrate@latest</span><br></pre></td></tr></table></figure><p><strong>Rust环境</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export RUSTUP_DIST_SERVER=https://mirrors.ustc.edu.cn/rust-static</span><br><span class="line">export RUSTUP_UPDATE_ROOT=https://mirrors.ustc.edu.cn/rust-static/rustup</span><br><span class="line">curl https://sh.rustup.rs -sSf | sh</span><br><span class="line">source &quot;$HOME/.cargo/env&quot;</span><br></pre></td></tr></table></figure><p><code>.cargo/config</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[source.crates-io]</span><br><span class="line">replace-with = &#x27;ustc&#x27;</span><br><span class="line"></span><br><span class="line">[source.ustc]</span><br><span class="line">registry = &quot;git://mirrors.ustc.edu.cn/crates.io-index&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 备忘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序中使用云函数</title>
      <link href="/posts/eb2d16a8/"/>
      <url>/posts/eb2d16a8/</url>
      
        <content type="html"><![CDATA[<p>微信小程序官方文档：<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/">https://developers.weixin.qq.com/miniprogram/dev/framework/</a></p><h3 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h3><p>安装CloudBase云开发环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g @cloudbase/cli --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://docs.cloudbase.net/cli-v1/quick-start.html">快速开始 | 云开发 CloudBase - 一站式后端云服务</a></p></blockquote><p>登录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcb login --apiKeyId xxx --apiKey xxx</span><br></pre></td></tr></table></figure><p>创建项目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tcb new xxx node-starter <span class="comment"># 创建项目</span></span><br><span class="line"><span class="built_in">cd</span> xxx <span class="comment"># 进入项目文件夹</span></span><br><span class="line"></span><br><span class="line">tcb fn list</span><br></pre></td></tr></table></figure><p>云函数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 发布云函数</span></span><br><span class="line">tcb fn deploy nodeapp2 <span class="comment"># 在项目根目录下（cloudbaserc.json 所在目录）运行</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看云函数列表</span></span><br><span class="line">tcb fn list</span><br><span class="line">cloudbase <span class="built_in">functions</span>:list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 HTTP 访问服务地址</span></span><br><span class="line">tcb service create -p /nodeapp234 -f nodeapp2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询 HTTP 访问服务信息</span></span><br><span class="line">tcb service list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除 http 访问服务</span></span><br><span class="line">tcb service delete -p /nodeapp234</span><br></pre></td></tr></table></figure><p>在云函数目录下安装sdk</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 微信云开发 SDK</span></span><br><span class="line">npm install --save wx-server-sdk@latest --registry=https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line"><span class="comment"># Cloudbase Server Node.js SDK</span></span><br><span class="line">npm install --save @cloudbase/node-sdk --registry=https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其他包</span></span><br><span class="line">npm i jsonexport --registry=https://registry.npm.taobao.org</span><br><span class="line">npm i adm-zip --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>云函数环境初始化：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="keyword">const</span> tcb = <span class="built_in">require</span>(<span class="string">&#x27;@cloudbase/node-sdk&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = tcb.<span class="title function_">init</span>(&#123;</span><br><span class="line"><span class="attr">env</span>: tcb.<span class="property">SYMBOL_CURRENT_ENV</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>服务端环境初始化：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化示例</span></span><br><span class="line"><span class="keyword">const</span> tcb = <span class="built_in">require</span>(<span class="string">&quot;@cloudbase/node-sdk&quot;</span>);</span><br><span class="line"><span class="comment">// env如果不指定将使用默认环境</span></span><br><span class="line"><span class="keyword">const</span> app = tcb.<span class="title function_">init</span>(&#123;</span><br><span class="line">  <span class="attr">secretId</span>: <span class="string">&quot;xxxxx&quot;</span>,</span><br><span class="line">  <span class="attr">secretKey</span>: <span class="string">&quot;xxxx&quot;</span>,</span><br><span class="line">  <span class="attr">env</span>: <span class="string">&quot;xxx&quot;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>更新项目配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新 app 函数的配置</span></span><br><span class="line">tcb fn config update app</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新配置文件中所有函数的配置信息</span></span><br><span class="line">tcb fn config update</span><br></pre></td></tr></table></figure><p>更新 函数代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新 app 函数的代码</span></span><br><span class="line">tcb fn code update app</span><br></pre></td></tr></table></figure><p>初始化vue项目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli --registry=https://registry.npm.taobao.org</span><br><span class="line">vue create my-project</span><br><span class="line">npm install vuex --save --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
            <tag> 云函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>制作贴纸</title>
      <link href="/posts/1d15c7b5/"/>
      <url>/posts/1d15c7b5/</url>
      
        <content type="html"><![CDATA[<p>制作贴纸并发布到Stickers Bot。</p><span id="more"></span><p>首先，新建一个画布，名称自定义。预设的宽度最好是512的倍数。</p><p><img src="/../img/20200620/1.png" alt="1"></p><p>选择切片选择工具</p><p><img src="/../img/20200620/2.png" alt="2"></p><p>选中画布之后，点击划分</p><p><img src="/../img/20200620/3.png" alt="3"></p><p>划分切片的时候，水平划分的个数最好是512的倍数</p><p><img src="/../img/20200620/4.png" alt="4"></p><p>新建一个图层，制作贴纸</p><p><img src="/../img/20200620/5.png" alt="5"></p><p>在文件下拉选项中，点击存储为Web所用格式</p><p><img src="/../img/20200620/6.png" alt="6"></p><p>预设建议使用PNG-24，透明度根据自己选择是否勾选</p><p><img src="/../img/20200620/7.png" alt="7"></p><p>最后保存，选择保存所有切片时，文件名会以数字的形式递增显示</p><p><img src="/../img/20200620/8.png" alt="8"></p><p>贴纸制作完成之后，在<a href="https://t.me/Stickers">@Stickers</a>中输入<code>/newpack</code>，给贴纸取一个名字，然后添加并描述贴纸，添加完成之后输入<code>/publish</code>发布贴纸，最后自定义贴纸的链接，完成。</p>]]></content>
      
      
      <categories>
          
          <category> 知道 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sticker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>番剧推荐</title>
      <link href="/posts/70fc6f6f/"/>
      <url>/posts/70fc6f6f/</url>
      
        <content type="html"><![CDATA[<p>推荐一些轻松搞笑的番剧，排名不分前后，想到哪写到哪。</p><span id="more"></span><p><a href="">女高中生的无所事事</a></p><p><a href="">邪神与厨二病少女</a></p><p><a href="">珈百璃的堕落</a></p><p><a href="">endro~</a></p><p><a href="">千绪的通学路</a></p><p><a href="">街角魔族</a></p><p><a href="">辉夜大小姐想让我告白</a></p><p><a href="">天使降临到我身边</a></p><p><a href="">超能力女儿</a></p><p><a href="">徒然喜欢你</a></p><p><a href="">男子高中生的日常</a></p><p><a href="">笨蛋测验召唤兽</a></p><p><a href="">这个美术社大有问题！</a></p><p><a href="">日常系的异能战斗</a></p><p><a href="">日常</a></p><p><a href="">猫咪日常</a></p><p><a href="">悠哉日常大王</a></p><p><a href="">为美好的世界献上祝福</a></p><p><a href="">世界征服 谋略之星</a></p><p><a href="">女仆咖啡厅</a></p><p><a href="">我女友与青梅竹马的惨烈修罗场</a></p><p><a href="">WWW.迷糊餐厅</a></p><p>未完待续~</p>]]></content>
      
      
      <categories>
          
          <category> 备忘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Anime </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置 Jupyter 服务远程访问</title>
      <link href="/posts/bb5e666d/"/>
      <url>/posts/bb5e666d/</url>
      
        <content type="html"><![CDATA[<p>在本机开启了<code>jupyter</code>之后默认是无法远程访问的，需要修改配置文件。</p><span id="more"></span><p>安装环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python -m pip install --upgrade pip</span><br><span class="line">pip install jupyterlab</span><br></pre></td></tr></table></figure><p>生成配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook --generate-config</span><br></pre></td></tr></table></figure><p>设置密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook password</span><br></pre></td></tr></table></figure><p>修改<code>jupyter_notebook_config.py</code>配置文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">## Whether to allow the user to run the notebook as root.</span></span><br><span class="line">c.NotebookApp.allow_root = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 允许任何ip.</span></span><br><span class="line">c.NotebookApp.ip = <span class="string">&#x27;0.0.0.0&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 默认打开位置.</span></span><br><span class="line">c.NotebookApp.notebook_dir = <span class="string">u&#x27;C:/Users/Documents/jupyter&#x27;</span></span><br><span class="line"></span><br><span class="line">c.NotebookApp.open_browser = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 设置端口号.</span></span><br><span class="line">c.NotebookApp.port = <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用密码登录</span></span><br><span class="line">c.NotebookApp.allow_password_change = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  When disabled, equations etc. will appear as their untransformed TeX source.</span></span><br><span class="line">c.NotebookApp.enable_mathjax = <span class="literal">True</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>启动<code>jupyter</code>服务：<code>jupyter lab</code>，只需要notebook：<code>jupyter notebook</code>。</p><blockquote><p>参考：<a href="https://jupyter-notebook.readthedocs.io/en/stable/public_server.html">官方文档</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 备忘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jupyter </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode远程开发配置</title>
      <link href="/posts/448ef873/"/>
      <url>/posts/448ef873/</url>
      
        <content type="html"><![CDATA[<p><em>开发环境：本地Windows10，远程Centos7。</em></p><span id="more"></span><p>本地需要安装的软件：<a href="https://code.visualstudio.com/">vscode</a>, <a href="https://npm.taobao.org/mirrors/git-for-windows/">git</a>，git官网的安装包下载太慢，用淘宝的镜像下载，选最新版就行。</p><p>远程服务器需要安装的软件：git, ssh-server, 由于我的远程服务器是Linux系统，git和ssh都已经有了，跳过。</p><p>1.先在Centos上查看git的版本：<code>git --version</code>，如果是1.x就需要先升级到2.x，不然连不上。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel asciidoc</span><br><span class="line">yum install  gcc perl-ExtUtils-MakeMaker</span><br><span class="line">yum remove git</span><br><span class="line"><span class="built_in">cd</span> /usr/local/src/</span><br><span class="line">wget https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.26.0.tar.xz</span><br><span class="line">tar -xvf git-2.26.0.tar.xz</span><br><span class="line"><span class="built_in">cd</span> git-2.26.0/</span><br><span class="line">make prefix=/usr/local/git all</span><br><span class="line">make prefix=/usr/local/git install</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;export PATH=<span class="variable">$PATH</span>:/usr/local/git/bin&quot;</span> &gt;&gt; /etc/profile</span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"><span class="comment"># 查看版本</span></span><br><span class="line">git --version</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.在本地的vscode扩展中搜索<code>Remote Development</code>, 点击安装，这个插件会自动安装其他依赖插件。</p><p><img src="/../img/20200505/3.png"></p><p>3.还是在vscode中，配置<code>Remote-SSH</code>。快捷键<code>ctrl+shift+p</code>，在搜索框中搜索：<code>Remote-SSH:Settings</code>, 找到<code>Remote-SSH: Show Login Terminal</code>，然后勾选<code>Always reveal the SSH login terminal</code>，保存关闭。</p><p><img src="/../img/20200505/6.png"></p><p>4.还是在vscode中，点击左下角的远程窗口按钮，点击<code>open configuration file</code>, 弹出了几个配置文件，选第一个用户文件夹下的config文件。</p><p><img src="/../img/20200505/4.png"></p><p><img src="/../img/20200505/2.png"></p><p>5.打开后编辑如下信息，编辑完成之后保存关闭。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># Read more about SSH config files: https://linux.die.net/man/5/ssh_config</span></span><br><span class="line">Host 这里填自定义的名字</span><br><span class="line">    HostName 这里填远程服务器的IP地址</span><br><span class="line">    User 这里填登录用户名</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>6.然后就可以在左侧的远程资源管理器的SSH Targets选项中看到刚才的配置好的主机，右键连接，输入密码登录，完成。</p><p><img src="/../img/20200505/5.png"></p>]]></content>
      
      
      <categories>
          
          <category> 备忘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
